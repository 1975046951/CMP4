规则分享，当前分享的是：小程序，无根树，花正清，不断荤腥不戒淫￥home_rule_v2￥base64://@MyFieldᴰⁿ@{"last_chapter_rule":"","title":"MyFieldᴰⁿ","author":"断念&道长魔改","url":"hiker://empty","version":372,"col_type":"text_center_1","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\n    const {demoData,defaultSets,floors} = $.require(\"hiker://page/demoData?rule=MyFieldᴰⁿ\");\nconst {getOne,unique2,duplicates} = $.require(\"hiker://page/utils?rule=MyFieldᴰⁿ\");\nlet sjTest =[];for(let i in demoData){sjTest=sjTest.concat(demoData[i])}\nthis.d = [];\nconst jxItem = $.require(\"hiker://page/jxItem?rule=MyFieldᴰⁿ\");\nvar Route = $.require(\"hiker://page/Route?rule=MyFieldᴰⁿ\");\neval(getItem('myFunction'));\n// mzPopup();\nvar jxOldV = getVar('jxOldV');\nvar jxNewV = getVar('jxNewV');\nvar versionTips = parseFloat(jxNewV) > parseFloat(jxOldV) ? '‘‘有新版本: v' + jxNewV + '\\n先更新小程序然后点击下方按钮拉取至本地’’' : 'v'+jxOldV;\nd.push({\n    title: '‘‘’’<big><span style=\"color:#0C0000\">断插 道长魔改',\n    desc: versionTips,\n    url: Route.szParse,\n    //url: 'toast://这是标题',\n    col_type: 'text_center_1'\n});\n\nfunction czGuide() {\n    return $().rule((k) => {\n        setResult([{\n            title: eval(JSON.parse(fetch(\"hiker://page/Guide?rule=MyFieldᴰⁿ\"))).rule,\n            col_type: 'rich_text'\n        }]);\n    })\n}\naddListener('onClose', $.toString(() => {\n    //clearVar(\"parseUrl.url\");\n    clearItem(\"class\");\n}));\nd.push({\n    title:'开始解析',\n    col_type: 'input',\n    desc: \"请输解析地址\",\n    url:$.toString(()=>{\n        let url = getVar(\"parseUrl.url\", \"\").trim();\n        if (!/^http/.test(url)) {\n            return \"toast://还没有输入链接哦\";\n        }\n        let jx = getItem(\"selected\", \"\");\n        if(jx&&jx.length>2&&!jx.startsWith('http')){\n            jx = '';//断插高级方法直接清空解析链接后面调用标题名字\n        }\n        let playUrl = jx + url;\n        log(playUrl);\n        if(!/^http/.test(playUrl)){\n            return 'toast://看起来播放地址似乎不对劲?\\n'+playUrl\n        }\n        return $().lazyRule((playUrl,url)=>{\n            let title = getItem(\"selected0\", \"&&\").split(\"&&\")[0].replace(/👉/g,'');\n            if(getItem('dn.test_mode')==='断插'&&title!=='不选'){\n                eval(\"var config =\" + fetch(\"hiker://files/cache/MyParseSet.json\"));\n                eval(fetch(config.cj));\n                let title = getItem(\"selected0\", \"&&\").split(\"&&\")[0].replace(/👉/g,'').replace(/不选/g,'');\n                log('开始调用断插测试,myFiled超时为:'+getItem('dn.timeout','5000'));\n                return aytmParse(url,title,parseInt(getItem('dn.timeout','5000')));\n            }else{\n                const {lazyParse} = $.require('hiker://page/globalParse?rule=道长仓库Pro');\n                return lazyParse(playUrl,parseInt(getItem('dn.timeout','5000')))||'toast://解析失败,具体看日志'\n            }\n        },playUrl,url)\n    }),\n    extra: {\n        blockRules: ['baidu.*.png', '.jpg','.mp3','.mp4','.m3u8','.flv','.avi','.3gp','.mpeg','.wmv','.mov','.rmvb','.gif','.jpg','.jpeg','.png','.ico','.svg'],\n        titleVisible: true,\n        defaultValue: getVar('parseUrl.url', '') || \"\",\n        onChange: 'putVar(\"parseUrl.url\",input)'\n    }\n});\nlet sel_title = ['Q神','断插'].map((it) => {\n    let test_mode = getItem('dn.test_mode','Q神');\n    return it===test_mode?'👉'+it:it;\n});\n\nd.push({\n    title:'💫'+getItem('dn.test_mode','Q神'),\n    col_type:'scroll_button',\n    url:$(sel_title,2).select(()=>{\n        input = input.replace(/👉/g,'');\n        setItem('dn.test_mode',input);\n        // setItem(\"selected\", url);\n        setItem(\"selected\", \"\"); // 重置解析头\n        setItem(\"selected0\", \"不选&&\"); //切换模式清空选中的解析\n        refreshPage(true);\n        return 'toast://已切换模式为:'+input\n    })\n});\n\nlet titleArr = [], urlArr = [];\nvar json={title:[],codes:{}};\nif(getItem('dn.test_mode','Q神')==='Q神'){\n    let parseUrlText = request(\"hiker://files/jiexi/jiexi.txt\");\n    let parseUrlArray = parseUrlText.split(/\\n/);\n    parseUrlArray.forEach((it) => {\n        it = it.split(\"&&\");\n        titleArr.push(it[0]);\n        urlArr.push(it[1]);\n    });\n}\nelse if(getItem('dn.test_mode','Q神')==='断插'){\n    let setFile = request('hiker://files/rules/DuanNian/MyParse.json');\n    try {\n        eval('json='+setFile);\n    }catch (e) {\n        log('Json解析发生了错误:'+e.message);\n    }\n    titleArr = json.title;\n    titleArr.forEach((it) => {\n        urlArr.push(json.codes[it]);\n    });\n    //$.stringify(json)\n}\n\nd.push({\n    title:titleArr.length+'',\n    col_type:'scroll_button',\n    url:$(getItem('dn.test_mode','Q神')+'共计解析数量:'+titleArr.length+'个\\n是否随机来个地址进行测试?').confirm((sjTest,getOne)=>{\n        putVar('parseUrl.url', getOne(sjTest));\n        refreshPage(true);\n        return 'toast://地址已给你了'\n    },sjTest,getOne)\n});\n\nlet realTitles = titleArr;\ntitleArr = ['不选'].concat(titleArr);\ntitleArr = titleArr.map((it) => {\n    let title = getItem(\"selected0\", \"&&\").split(\"&&\")[0];\n    return it===title?'👉'+it:it;\n});\nd.push({\n    title: '☢️'+getItem(\"selected0\", \"&&\").split(\"&&\")[0],\n    url: $(titleArr, 3).select((realTitles,urlArr) => {\n        input = input.replace(/👉/g,'');\n        if(input==='不选'){\n            setItem(\"selected\", '');\n            setItem(\"selected0\", input + \"&&\" + '');\n            refreshPage(false);\n            return \"toast://已取消解析口,直接进行直链解析\";\n        }\n        let i = realTitles.indexOf(input);\n        let url = urlArr[i];\n        log(\"\\n更改接口> \" + url);\n        if(typeof(url)!=='string'){\n            log($.toString(url));\n            setItem(\"selected\", $.toString(url));\n            // return 'toast://暂不支持断插function系列的高级解析测试'\n        }else{\n            setItem(\"selected\", url);\n        }\n        setItem(\"selected0\", input + \"&&\" + url);\n        refreshPage(false);\n        return \"toast://切换解析口为:\"+input;\n    }, realTitles,urlArr),\n    col_type: \"scroll_button\"\n});\nd.push({\n    title:'🍀主题',\n    url: \"hiker://page/Route?rule=MyFieldᴰⁿ&type=主题#noHistory#\",\n    col_type: \"scroll_button\"\n});\nd.push({\n    title:'🍀解析',\n    url: \"hiker://page/Route?rule=MyFieldᴰⁿ&type=解析#noRecordHistory#\",\n    col_type: \"scroll_button\"\n});\n\nd.push({\n    title:'🕒'+getItem('dn.timeout','5000'),\n    col_type:'scroll_button',\n    url:$(getItem('dn.timeout','5000'),'请输入解析超时毫秒').input(()=>{\n        if(!parseInt(input)){\n            return 'toast://超时设置错误，拒绝保存'\n        }\n        setItem('dn.timeout',input||'5000');\n        refreshPage(true);\n        return 'toast://已设置解析超时毫秒:'+getItem('dn.timeout','5000');\n    }),\n});\nd.push({\n    title:'📲导出TXT',\n    col_type:'scroll_button',\n    url:$('确认导出本地明文且复制云剪切板?\\n可完美导出名称地址的通用规则,对function类兼容暂时不是很好').confirm((titleArr,urlArr)=>{\n        let mode = getItem('dn.test_mode','Q神');\n        if(mode==='断插'||mode==='Q神'){\n            let jxCode = [];\n            titleArr.forEach((it) => {\n                if(!/不选/.test(it)){\n                    let i = titleArr.indexOf(it);\n                    let code = urlArr[i-1];\n                    let outCode = (typeof(code)==='string'||typeof(code)==='undefined')?code:base64Encode(code.toString());\n                    let outTitle = it.replace(/👉/g,'');\n                    if(outTitle.startsWith('http')&&(typeof(outCode)==='undefined'||!outCode)){\n                        jxCode.push(outTitle+','+outTitle);\n                    }else{\n                        jxCode.push(outTitle+','+outCode||'')\n                    }\n                }\n            });\n            let outText = jxCode.join('\\n');\n            let outPath = 'hiker://files/rules/DuanNian/MyParseOut_'+mode+'.txt';\n            writeFile(outPath,outText);\n            let pastes = getPastes();\n            let importUrl = sharePaste(base64Encode(outText),pastes[1]);\n            let importCode = '魔断解析导入口令¥¥'+importUrl;\n            copy(importCode);\n            return 'toast://文件已导出到:'+outPath+'\\n请自行通过MT管理器查看'\n        }else{\n            return 'toast://我不清楚你要做什么?\\n'+mode;\n        }\n    },titleArr,urlArr),\n});\nd.push({\n    title:'📥导入TXT',\n    col_type:'scroll_button',\n    url:$().rule(()=>{\n        let d = [];\n        d.push({\n            title:'导入说明',\n            col_type:'text_1',\n            desc:'支持此插件导出格式的文本进行导入。\\n格式1: 名称,地址 一行一个解析\\n格式2:云剪切板 魔断解析导入口令¥¥剪切板地址',\n            url:'hiker://empty'\n        });\n        d.push({\n            desc: \"txt文本解析规则,一行一个\",\n            col_type: 'input',\n            title:'解析文本',\n            extra: {\n                titleVisible: false,\n                defaultValue: getVar('dn.import_text', ''),\n                type: \"textarea\",\n                height:-1,\n                onChange: 'putVar(\"dn.import_text\",input)'\n            }\n        });\n        d.push({\n            title:'📥导入',\n            col_type:'text_center_1',\n            url:$('确定编辑好了吗?此操作将覆盖本地已有的记录，建议备份后用空文件导入').confirm(()=>{\n                const {defaultSets} = $.require(\"hiker://page/demoData?rule=MyFieldᴰⁿ\");\n                let parseRoute = 'hiker://files/rules/DuanNian/MyParse.json';\n                let jsCode = fetch(parseRoute)||JSON.stringify({title:[],codes:{},settings:defaultSets});\n                try {\n                    eval('var json =' + jsCode);\n                }\n                catch (e) {\n                    return 'toast://发生错误:\\n'+e.message\n                }\n                let toImport = getVar(\"dn.import_text\");\n                if(/魔断解析导入口令¥¥/.test(toImport)&&toImport.split('¥¥').length>1){\n                    let url = toImport.split('¥¥')[1];\n                    if(!/^http/.test(url)){\n                        return 'toast://剪切板地址有误,导入失败'\n                    }\n                    toImport = parsePaste(url);\n                    toImport = base64Decode(toImport);\n                }\n                let jiexi = toImport.split('\\n');\n                let parseTitle = [];\n                let parseCode = {};\n                for (let i in jiexi) {\n                    let title=jiexi[i].split(',')[0];\n                    let code=jiexi[i].split(',')[1];\n                    parseTitle.push(title);\n                    if(!(code.replace(/[\\s]/g,'').startsWith('http'))){\n                        // log(title+'为函数解析');\n                        if(code.replace(/[\\s]/g,'').length>20){//视为function\n                            try {\n                                code = eval(base64Decode(code));\n                                // log(code);\n                            }catch (e) {\n                                code = e.message;\n                            }\n                        }\n                    }\n                    parseCode[title]=code;\n                }\n                let scObject = [\"CityIP\", \"pcUA\", \"cacheM3u8\", \"defaultParseWeb\",\"maoss\", \"LLQ\"];\n                parseTitle = parseTitle?parseTitle.filter(it=>!scObject.includes(it)):[];\n                var newParseTitle = json.title.concat(parseTitle);\n                json.title = Array.from(new Set(newParseTitle));\n                Object.assign(json.codes, parseCode);\n                let newFile = $.stringify(json); //JSON.parse会报错\n                writeFile(parseRoute, newFile);\n                refreshPage(false);\n                return 'toast://已成功导入'+jiexi.length+'条解析';\n            }),\n            extra:{\n                lineVisible:true\n            }\n        });\n        setResult(d);\n    }),\n});\nd.push({\n    title:'☯️查重处理',\n    col_type:'scroll_button',\n    url:$().lazyRule((unique2,duplicates,floors)=>{\n        let parseRoute = 'hiker://files/rules/DuanNian/MyParse.json';\n        let jsCode = fetch(parseRoute);\n        try {\n            eval('var json =' + jsCode);\n        }\n        catch (e) {\n            return 'toast://本地那个MyParse.json文件有问题,这个功能不给你用了!'\n        }\n        let titles = json.title;\n        let codes = json.codes;\n        let keys= Object.keys(codes);\n        let keys_re_ct = keys.length - unique2(keys).length; // 名称重复\n        let normal_list = [];\n        for(let o in codes){\n            if(typeof(codes[o])!=='undefined'&&typeof(codes[o])!=='function'){\n                normal_list.push(codes[o]);\n            }\n        }\n        let reNorList = unique2(normal_list);\n        let value_re_ct = normal_list.length - reNorList.length; //代码重复\n        let values_re = duplicates(normal_list);//重复的值\n        let ftlist = [];\n        let flags = {};\n        let myFloors = floors;\n        for(let j in codes){//遍历所有\n            let one = codes[j];\n            try {\n                if (typeof(one) !== 'function'&&values_re.includes(one)) {\n                    if (typeof (flags[one]) === 'undefined' || !flags[one]) {\n                        //取出第一个标志\n                        flags[one] = myFloors[0];\n                        myFloors.splice(0, 1);//删除标志列表里的第一个元素\n                    }\n                    ftlist.push({key: flags[one] + j, value: one});\n                } else {\n                    ftlist.push({key: j, value: one});\n                }\n            }catch (e) {\n                log(e.message)\n            }\n        }\n        // log(JSON.stringify(flags));\n        let newCodes = {};\n        for(let k in ftlist){\n            newCodes[ftlist[k].key] = ftlist[k].value;\n        }\n        let tips = '检测到名称复用项目数:'+keys_re_ct+',代码重复项目数量:'+value_re_ct+'\\n需要一键打个标识吗?不支持自动删除,打标志自行解决';\n        return $(tips).confirm((value_re_ct,json,newCodes,parseRoute)=>{\n            if(value_re_ct<1){\n                return 'toast://既然都是0个重复项目了，就不需要我做什么了!'\n            }\n            function compare(){\n                return function (a, b){\n                    const {floors} = $.require(\"hiker://page/demoData?rule=MyFieldᴰⁿ\");\n                    let x = a.substring(0,1);\n                    let y = b.substring(0,1);\n                    return floors.indexOf(y)-floors.indexOf(x);\n                }\n            }\n            json.codes = newCodes;\n            let titles = Object.keys(newCodes);\n            titles = titles.sort(compare());\n            json.title = titles;\n            var newFile = $.stringify(json); //JSON.parse会报错\n            writeFile(parseRoute, newFile);\n            refreshPage(false);\n            return 'toast://已一键打上标志';\n        },value_re_ct,json,newCodes,parseRoute)\n    },unique2,duplicates,floors),\n});\nd.push({\n    title:\"🔄重置B站UA\",\n    col_type: \"scroll_button\",\n    url: \"https://www.bilibili.com/\",\n    extra: {\n        ua: PC_UA\n    }\n});\nd.push({\n    title:\"🗑️批量删除\",\n    col_type: \"scroll_button\",\n    url: $('hiker://empty#noRecordHistory#').rule(()=>{\n        let localHtml = 'file:///storage/emulated/0/Android/data/com.example.hikerview/files/Documents/cache/plscParse.html';\n        let testcode = fetch(localHtml);\n        if(!testcode||/批量删除解析/.test(testcode)){\n            writeFile(localHtml,fetch('http://hiker.nokia.press/hikerule/zyw_data/10'));\n        }\n        let d = [];\n        d.push({title: \"批量删除解析\", desc: \"auto&&float\", url: \"file:///storage/emulated/0/Android/data/com.example.hikerview/files/Documents/cache/plscParse.html\", col_type: \"x5_webview_single\"});\n        setResult(d);\n    }),\n});\nlet web_sel = '爱奇艺/优酷/腾讯/芒果/哔哩哔哩/搜狐/西瓜/阿里/PPTV/咪咕/乐视/1905/风行'.split('/');\nd.push({\n    title:'‘‘’’<span style=\"color:#00d9ff\">来个测试地址',\n    col_type: \"text_2\",\n    url:$(web_sel,4).select((demoData,getOne)=>{\n        let urls = demoData[input];\n        let url = getOne(urls)||'';\n        if(!url){\n            return 'toast://'+input+'这个网站暂时没有播放例子'\n        }\n        putVar('parseUrl.url', url);\n        refreshPage(true);\n        return 'toast://给你找了个'+input+'的播放地址:\\n'+url;\n    },demoData,getOne)\n});\nif(getItem('dn.test_mode','Q神')==='Q神'){\n    d.push({\n        //'#ff7000'\n        title:'‘‘’’<span style=\"color:#ff7000\">Q神插件接口设置',\n        // title: '““Q神插件接口设置””',\n        url: \"hiker://page/EditUrl?rule=MyFieldᴰⁿ\",\n        col_type: 'text_2'\n    });\n}else if(getItem('dn.test_mode','Q神')==='断插'){\n    let url = realTitles.length>0?\"hiker://page/Route?rule=MyFieldᴰⁿ&type=编辑#noHistory#\":$('别设置了，先拉代码').confirm()\n    d.push({\n        title:'‘‘’’<span style=\"color:#ff7000\">断插接口设置',\n        url: url,\n        col_type: 'text_2'\n    });\n}\nd.push({\n    title:'‘‘’’<span style=\"color:#ff7000\">小白关怀模式: </span><span style=\"color:grey\"><small>不懂不学啥也不会？拯救傻白甜的你</small></span>',\n    url: $('#noLoading##noRecordHistory#').lazyRule(()=>{\n        return 'hiker://page/smallWhite?rule=MyFieldᴰⁿ'\n    }),\n    col_type: 'text_1',\n});\n\njxItem.lqFile();\nlet extra = d.slice(-7,d.length); //断插添加的元素\nd = d.slice(0,-7); // 自己的函数\nextra[0].title='拉取列表(不推荐)'\nextra[0].col_type='text_2'\nextra[1].title='拉取代码(强烈推荐)'\nextra[1].col_type='text_2'\nextra[4].col_type='text_center_1'\nextra[4].url=czGuide();\nextra.splice(2,1);\nd = d.concat(extra);\n// d.splice(d.length-5,1);\nsetResult(d);","search_url":"","group":"#️⃣工具","searchFind":"","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"","pages":"[{\"col_type\":\"movie_3\",\"name\":\"Parse_Dn-vue.html\",\"path\":\"Parse_Dn.html\",\"rule\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"utf-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no\\\" />\\n    <title>Parse_Dn_vue</title>\\n    <script>\\n        const vuePath = 'hiker://files/rules/dzHouse/js/vue.js';\\n        if(typeof(fba)=='undefined'||!fba){\\n            var fba = fy_bridge_app;\\n        }\\n        try {\\n            if(typeof(request)=='undefined'||!request){\\n                eval(fba.getInternalJs());\\n            }\\n            // fba.log(vuePath);\\n            if(!request(vuePath)){\\n                fba.writeFile(vuePath,request('http://hiker.nokia.press/hikerule/rulelist.json?id=1823'));\\n            }\\n            try {\\n                eval(fba.fetch(vuePath));\\n            }catch (e) {\\n                // console.log(e.message);\\n                fba.log(e.message);\\n            }\\n            // fba.log('加载vue组件完毕');\\n        }catch (e) {\\n            alert(e.message);\\n        }\\n    </script>\\n    <!--    <script src=\\\"https://unpkg.com/vue@next\\\"></script>-->\\n    <!--    <script src=\\\"file:///storage/emulated/0/Android/data/com.example.hikerview/files/Documents/rules/dzHouse/js/vue.js\\\"></script>-->\\n    <style>\\n        body {\\n            margin: 0 5px 0 5px;\\n            padding: 0 0px 0 0px;\\n            /*            background: #F9F0DA;*/\\n            font-weight: 0;\\n            font-family: \\\"Microsoft YaHei\\\",\\\"宋体\\\",\\\"Segoe UI\\\", \\\"Lucida Grande\\\", Helvetica, Arial,sans-serif, FreeSans, Arimo;\\n        }\\n        #app{\\n            margin-top:-10px;\\n        }\\n        #tips{\\n            margin-top:-10px;\\n            margin-bottom:5px;\\n        }\\n        .fung{\\n            text-align:center\\n        }\\n        div.box {\\n            margin-top:-1px;\\n            height: 43px;\\n            line-height: 20px;\\n        }\\n        /*输入框尺寸*/\\n        form {\\n            background: transparent;\\n            position: relative;\\n            width: 100%;\\n        }\\n\\n        input, label, select {\\n            border: none;\\n            outline: none;\\n        }\\n        /*字体位置*/\\n        input {\\n            width: 77%;\\n            height: 32px;\\n            padding-left: 66px;\\n            padding-right: 0px;\\n        }\\n\\n        label {\\n            text-align:center;\\n            line-height: 43px;\\n            height: 40px;\\n            width: 60px;\\n            cursor: pointer;\\n            position: absolute;\\n        }\\n\\n        /*小框*/\\n        .bar label {\\n            /*background: #D06B6C;*/\\n            border-radius: 5px 555px 555px 5px;\\n            width: 60px;\\n            font-size: 13px;\\n            top: 0;\\n            left: 3px;\\n        }\\n\\n        /*输入框样式*/\\n        .bar input {\\n            /*border-radius: 5px 555px 555px 5px;\\n             */\\n            border-radius: 4px;\\n        }\\n\\n        /*列表*/\\n        select {\\n            text-align:center;\\n            line-height:40px;\\n            height: 40px;\\n            width: 20px;\\n            cursor: pointer;\\n            position: absolute;\\n        }\\n\\n        /*列表*/\\n        .lieb select{\\n            /*border-radius: 4px;*/\\n            border-radius: 555px 5px 5px 555px;\\n            width: 80px;\\n            text-align:center;\\n            font-size: 13px;\\n            top: 0;\\n            right: 2px;\\n        }\\n\\n        /*头像*/\\n        .round_icon{\\n            width: 40px;\\n            height: 40px;\\n            display: flex;\\n            border-radius: 50%;\\n            align-items: center;\\n            justify-content: center;\\n            overflow: hidden;\\n        }\\n    </style>\\n</head>\\n<body>\\n<div class=\\\"fung\\\">\\n    <a style=\\\"float:left;\\\">\\n        <button  :style=\\\"'border: none;border-radius:10px;background: '+themes.closeBtn.background+';width: 80px; font-size: 18px;color: '+themes.closeBtn.color\\\" onclick=\\\"cancel();\\\">关 闭</button>\\n    </a>\\n    <a class=\\\"btn btn-primary\\\">\\n        <button  :style=\\\"'border: none;border-radius:10px;background: '+themes.tipsBtn.background+';width: 120px; font-size: 18px;color: '+themes.tipsBtn.color\\\" @click=\\\"showTips=!showTips\\\">{{showTips?\\\"隐藏提示\\\":\\\"显示提示\\\"}}</button>\\n    </a>\\n    <a style=\\\"float:right\\\">\\n        <button :style=\\\"'border: none;border-radius:10px;background: '+themes.saveBtn.background+';width: 80px; font-size: 18px;color: '+themes.saveBtn.color\\\" onclick=\\\"clickme('配 置 已 保 存 ！', 1000, '开');\\\">保 存</button>\\n    </a>\\n\\n</div>\\n<br>\\n<div id=\\\"app\\\">\\n    <h6 id=\\\"tips\\\" v-html=\\\"tips\\\" v-show=\\\"showTips\\\"></h6>\\n    <div class=\\\"box bar\\\" v-for=\\\"option in options\\\">\\n        <form>\\n            <label type=\\\"submit\\\" :style=\\\"'background:'+themes.barlabel.background+';color:'+themes.barlabel.color\\\">{{ option.name }}</label>\\n            <input :style=\\\"'background:'+themes.barInput.background+';border: 3px solid '+themes.barInput.color\\\" type=\\\"text\\\" onclick=\\\"resetSelect(this.id)\\\" :placeholder=\\\"option.placeholder||placeholder\\\" v-model=\\\"option.value\\\" v-bind:id=\\\"option.id\\\">\\n            <div class=\\\"lieb\\\">\\n                <select :style=\\\"'background:'+themes.select.background+';color:'+themes.select.color\\\" :clearable=\\\"true\\\" size=\\\"2\\\" :id=\\\"option.id+'Select'\\\" :name=\\\"option.id\\\" onchange=\\\"getOption(this.id,this.name)\\\"  v-model=\\\"option.value\\\">\\n                    <option v-if=\\\"option.id!=='qju'&&option.id!=='cj'\\\" :value=\\\"sel\\\" :key=\\\"index\\\" v-for=\\\"(sel,index) in mySelect\\\">{{ sel }}</option>\\n                    <option v-else-if=\\\"option.id==='qju'\\\" :value=\\\"sel\\\" :key=\\\"index\\\" v-for=\\\"(sel,index) in ['默认'].concat(mySelect)\\\">{{ sel }}</option>\\n                    <option :value=\\\"sel\\\" :key=\\\"index\\\" v-else v-for=\\\"(sel,index) in cjSel\\\">{{ sel }}</option>\\n                </select>\\n            </div>\\n        </form>\\n    </div>\\n</div>\\n<div>\\n    <a v-for=\\\"ver in verinfo\\\" style=\\\"float:left;margin-top:1px;margin-right: 20px\\\" v-bind:id='ver.id' onclick=\\\"doOption(this.id)\\\">\\n        <img :src=\\\"ver.avatar\\\" class=\\\"round_icon\\\"  alt=\\\"\\\">\\n        <span style=\\\"margin-left:10px;line-height:10px;font-size:12px;color: grey;\\\">{{ ver.author }}</span>\\n    </a>\\n    <a style=\\\"float:right;margin-top:10px;\\\">\\n        <button :style=\\\"'border: none;border-radius:10px;background:'+themes.saveCloseBtn.background+';width: 160px;height:40px; font-size: 18px;color: '+themes.saveCloseBtn.color\\\" onclick=\\\"clickme('配 置 已 保 存 ！', 1000, '关');\\\">保存并关闭界面</button>\\n    </a>\\n</div>\\n<script>\\n    let tips = `提示：<br>①注意插件选项，没有手动导入插件的话不用动它。如设置不当会导致规则无法使用，<br>解决办法：视界打开更多设置→文件管理→点cache→长按MyParseSet.json删除掉；<br>②全局设置如果选择了非默认那么全部的解析会使用这一设置，不想这样的话请填入默认；<br>③绿色保存按钮仅仅保存配置不会关闭设置页面，配置后想保存并关闭设置页面的话请点蓝色按钮；<br>④如果遇到保存按钮点不动或者报错的情况，以下路径挨着删除一遍，然后重新拉取插件，网页再打开此网页[不要先拉代码]。记得备份<br>\\n主插件存放路径: /cache/Parse_Dn.js<br>\\n网页脚本存放路径: /cache/Parse_Dn.html<br>\\n旧断插配置路径:/cache/MyParseSet.json<br>\\n新断插配置路径/rules/DuanNian/MyParse.json<br>\\n    ⑤阅读完提示点关闭加载完整设置页面，如出问题无法自行解决点图片进入论坛向我反馈。<br>`;\\n    let placeholder='输入解析名或者URL......';\\n    //#aa96da #fc5185\\n    let themes = {\\n        name:'默认主题',\\n        closeBtn:{color:'#f6f6f6',background:'#aa96da'},\\n        saveBtn:{color:'#F9F0DA',background:'#068006'},\\n        saveCloseBtn:{color:'#F9F0DA',background:'#05BFC5'},\\n        tipsBtn:{color:'#F9F0DA',background:'#05BFC5'},\\n        barlabel:{color:'#F9F0DA',background:'#aa96da'},\\n        barInput:{color:'#aa96da',background:'#ffffd2'},\\n        select:{color:'#F9F0DA',background:'#aa96da'},\\n    };\\n    let themeDef = {\\\"name\\\":\\\"断念原皮\\\",\\\"closeBtn\\\":{\\\"color\\\":\\\"#F9F0DA\\\",\\\"background\\\":\\\"#c5464a\\\"},\\\"saveBtn\\\":{\\\"color\\\":\\\"#F9F0DA\\\",\\\"background\\\":\\\"#068006\\\"},\\\"saveCloseBtn\\\":{\\\"color\\\":\\\"#F9F0DA\\\",\\\"background\\\":\\\"#05BFC5\\\"},\\\"tipsBtn\\\":{\\\"color\\\":\\\"#F9F0DA\\\",\\\"background\\\":\\\"#05BFC5\\\"},\\\"barlabel\\\":{\\\"color\\\":\\\"#F9F0DA\\\",\\\"background\\\":\\\"#D06B6C\\\"},\\\"barInput\\\":{\\\"color\\\":\\\"#D06B6C\\\",\\\"background\\\":\\\"#F9F0DA\\\"},\\\"select\\\":{\\\"color\\\":\\\"#F9F0DA\\\",\\\"background\\\":\\\"#D06B6C\\\"}};\\n    var themeRoute = \\\"hiker://files/cache/MyTheme.json\\\";\\n    if(!fba.fetch(themeRoute)){\\n        fba.writeFile(themeRoute,JSON.stringify({now_theme:'默认主题',themes:[themes,themeDef]}))\\n    }\\n    try {\\n        let myThemes = JSON.parse(fba.fetch(themeRoute));\\n        let nowTheme = myThemes.themes.filter(it=>it.name === myThemes.now_theme);\\n        themes = nowTheme?nowTheme[0]:myThemes.themes[0];\\n    }catch (e) {}\\n\\n    // 断念初始化部分\\n    const allApi=['https://test.rongxingvr.com/test/?url=','http://cache.languang.icu:88/didi.php?url='];\\n    var settings = {\\n        qy: '你爹科技',\\n        yk: '领酷',\\n        tx: '荣耀',\\n        mg: '蚂蚁兄弟',\\n        bl: 'OK解析',\\n        sh: '江湖D',\\n        xg: '江湖D',\\n        al: '江湖D',\\n        pp: '人人迷',\\n        mi: '1080',\\n        le: '迪奥嗅探',\\n        oth: '道长仓库通免',\\n        one: '1080',\\n        fun: '融兴',\\n        qju: '默认',\\n        cj: 'hiker://files/cache/Parse_Dn.js'\\n    };\\n    var oldRoute = \\\"hiker://files/cache/MyParseSet.json\\\";\\n    var mySet = fba.fetch(oldRoute);\\n    var newRoute = \\\"hiker://files/rules/DuanNian/MyParse.json\\\";\\n    if(!fba.fetch(newRoute)){\\n        fba.writeFile(newRoute,JSON.stringify({settings:settings,title:[\\\"yun1717\\\",\\\"你爹科技\\\",\\\"融兴\\\",\\\"人人迷-优酷\\\"],codes:{\\\"你爹科技\\\":\\\"http://cache.languang.icu:88/didi.php?url=\\\",\\\"融兴\\\":\\\"https://test.rongxingvr.com/test/?url=\\\",\\\"人人迷-优酷\\\":\\\"https://svip.renrenmi.cc:2222/api/?key=nn4j8rukPXSVzR78E9&url=\\\"}}))\\n    }\\n    var newConfig = fba.fetch(newRoute);\\n    var mySelect = [];\\n    function compare(list) {\\n        return function (it) {\\n            return !list.includes(it)\\n        }\\n    }\\n    if(newConfig&&newConfig.length>20){\\n        eval(\\\"newConfig =\\\" + newConfig + \\\";\\\");\\n        settings = Object.assign(settings,newConfig.settings);\\n        var ycTitle = ['defaultParse', 'defaultParseWeb','maoss', 'CityIP', 'cacheM3u8', 'pcUA', 'parseLc', 'gparse', 'nparse'];\\n        mySelect = newConfig.title.filter(compare(ycTitle));\\n    }\\n    //fba.log(JSON.stringify(mySelect));\\n\\n    let options = [\\n        {\\n            name:'爱奇艺',\\n            id:'qy',\\n            value:settings.qy,\\n            placeholder:'设置爱奇艺'\\n        },\\n        {\\n            name:'优酷',\\n            id:'yk',\\n            value:settings.yk\\n        },\\n        {\\n            name:'腾讯',\\n            id:'tx',\\n            value:settings.tx\\n        },\\n        {\\n            name:'芒果',\\n            id:'mg',\\n            value:settings.mg\\n        },\\n        {\\n            name:'哔哩哔哩',\\n            id:'bl',\\n            value:settings.bl\\n        },\\n        {\\n            name:'搜狐',\\n            id:'sh',\\n            value:settings.sh\\n        },\\n        {\\n            name:'西瓜',\\n            id:'xg',\\n            value:settings.xg\\n        },\\n        {\\n            name:'阿里',\\n            id:'al',\\n            value:settings.al\\n        },\\n        {\\n            name:'PPTV',\\n            id:'pp',\\n            value:settings.pp\\n        },\\n        {\\n            name:'咪咕',\\n            id:'mi',\\n            value:settings.mi\\n        },\\n        {\\n            name:'乐视',\\n            id:'le',\\n            value:settings.le\\n        },\\n        {\\n            name:'1905',\\n            id:'one',\\n            value:settings.one\\n        },\\n        {\\n            name:'风行',\\n            id:'fun',\\n            value:settings.fun\\n        },\\n        {\\n            name:'其他',\\n            id:'oth',\\n            value:settings.oth\\n        },\\n        {\\n            name:'全局',\\n            id:'qju',\\n            value:settings.qju\\n        },\\n        {\\n            name:'插件',\\n            id:'cj',\\n            value:settings.cj\\n        },\\n    ];\\n\\n    function Did(id){\\n        return document.getElementById(id);\\n    }\\n    function getOption(id,title) {\\n        var obj = Did(id);\\n        Did(title).value = obj.options[obj.selectedIndex].text;\\n    }\\n    function resetSelect(id){\\n        Did(id+\\\"Select\\\").options.selectedIndex = -1;\\n    }\\n\\n    //函数部分\\n\\n    function Toast(msg,duration){\\n        duration=isNaN(duration)?2000:duration;\\n        var m = document.createElement('div');\\n        m.innerHTML = msg;\\n        m.style.cssText=\\\"width:45%; min-width:150px; background:#311; opacity:0.6; height:auto;min-height: 45px; color:#fff; line-height:45px; text-align:center; border-radius:10px; position:fixed; top:60%; left:26%; z-index:999999;\\\";\\n        document.body.appendChild(m);\\n        setTimeout(function() {\\n            var d = 0.5;\\n            m.style.webkitTransition = '-webkit-transform ' + d + 's ease-in, opacity ' + d + 's ease-in';\\n            m.style.opacity = '0';\\n            setTimeout(function() { document.body.removeChild(m) }, d * 1000);\\n        }, duration);\\n    }\\n\\n    function openDnPage(){\\n        fba.open(JSON.stringify({\\n            rule: \\\"=^_^=\\\",\\n            title: \\\"编辑解析\\\",\\n            url: \\\"hiker://page/Route?rule=MyFieldᴰⁿ&type=编辑#noHistory#\\\",\\n            group: \\\"\\\",\\n            col_type: \\\"\\\",\\n            //findRule: \\\"js:this.d=[];$.require(\\\\\\\"hiker://page/Parse_Dn.js?rule=MyFieldᴰⁿ\\\\\\\").edit();setResult(d);\\\",\\n            preRule: \\\"\\\",\\n            extra: {}\\n        }));\\n    }\\n    function openTheme(){\\n        fba.open(JSON.stringify({\\n            rule: \\\"=^_^=\\\",\\n            title: \\\"主题管理\\\",\\n            url: \\\"hiker://page/Route?rule=MyFieldᴰⁿ&type=主题#noHistory#\\\",\\n            group: \\\"\\\",\\n            col_type: \\\"\\\",\\n            preRule: \\\"\\\",\\n            extra: {}\\n        }));\\n    }\\n    function openJxManage(){\\n        fba.open(JSON.stringify({\\n            rule: \\\"=^_^=\\\",\\n            title: \\\"解析配置管理\\\",\\n            url: \\\"hiker://page/Route?rule=MyFieldᴰⁿ&type=解析#noRecordHistory#\\\",\\n            group: \\\"\\\",\\n            col_type: \\\"\\\",\\n            preRule: \\\"\\\",\\n            extra: {}\\n        }));\\n    }\\n    function cancel(){\\n        if(!mySet){\\n            fba.writeFile(oldRoute, JSON.stringify(settings, null, 4));\\n            fba.refreshPage(true);\\n        }else{\\n            fba.back(false);\\n        }\\n    }\\n    function clickme(msg,duration,title){\\n        try{\\n            for(let key in settings){\\n                // fba.log(Did(key)+''+key);\\n                try{\\n                    settings[key] = Did(key).value;\\n                }catch(e){\\n                    alert(\\\"未获取到节点:\\\"+key+\\\"\\\\n\\\"+e.message);\\n                }\\n\\n            }\\n            if(mySelect){\\n                Object.assign(newConfig.settings, settings);\\n                fba.writeFile(newRoute, $$$.stringify(newConfig));\\n            }\\n            fba.writeFile(oldRoute, $$$.stringify(settings));\\n            Toast(msg,duration);\\n            if(title===\\\"关\\\"){\\n                fba.back();\\n            }else{\\n                fba.refreshPage(true);\\n            }\\n        }catch(e){\\n            alert(e.message)\\n        }\\n    }\\n\\n    //let width=window.screen.availWidth;\\n    //let widthPx=width-393+52;\\n    //alert(\\\"当前分辨率:\\\"+window.screen.availWidth+\\\"*\\\"+window.screen.height);\\n    var verinfo = [{\\n        id:'dn',\\n        author:'断念',\\n        avatar:'https://s3.ax1x.com/2021/02/22/y7wb9O.jpg',\\n        option:openDnPage,\\n    },\\n    {\\n        id:'dz',\\n        author:'道长',\\n        avatar:'http://q1.qlogo.cn/g?b=qq&nk=434857005&s=640',\\n        option:openTheme\\n    },\\n    {\\n    id:'lm',\\n        author: '蓝莓',\\n        avatar: 'http://q1.qlogo.cn/g?b=qq&nk=2579949378&s=640',\\n        option:openJxManage\\n    }\\n    ];\\n\\n    function doOption(option_id){\\n        let ver = verinfo.filter(it=>it.id===option_id)[0];\\n        ver.option();\\n    }\\n\\n    const RenderHtmlApp = {\\n        data() {\\n            return {\\n                // rawHtml: '<span style=\\\"color: red\\\">这里会显示红色！</span>',\\n                options:options,\\n                verinfo:verinfo,\\n                placeholder:placeholder,\\n                tips:tips,\\n                themes:themes,\\n                mySelect:mySelect,\\n                // cjSel:['请选择插件 (只作用lazyRule)','hiker://files/cache/Parse_Dn.js','hiker://files/rules/dzHouse/js/srcauto.js','hiker://files/rules/js/Parse-V2_Dn.js'],\\n                cjSel:['请选择插件 (只作用lazyRule)','hiker://files/cache/Parse_Dn.js'],\\n                settings:settings,\\n                showTips:false,\\n                //widthPx:widthPx\\n            }\\n        },\\n        methods:{\\n            // changeVal:function(event){\\n            //     getOption(this.id,this.name);\\n            //     this.selOption = event.target.value;\\n            //     alert(\\\"你选中了\\\"+event.target.value);\\n            // }\\n            doOption:doOption\\n        }\\n    }\\n    try {\\n        const app=Vue.createApp(RenderHtmlApp);\\n        app.mount('body');\\n    }catch (e) {\\n        console.log(e.message)\\n    }\\n\\n</script>\\n\\n</body>\\n</html>\"},{\"col_type\":\"movie_3\",\"name\":\"Parse_Dn.js\",\"path\":\"Parse_Dn.js\",\"rule\":\"//============免嗅调用============\\n//－－－=^_^=\\n\\nvar version = 3.49;\\nvar updateDate = '2021/10/29/10:35';\\nvar _mySet = {\\n    qju: '默认',\\n    oth:'道长仓库通免',\\n    cjcache: 'hiker://files/cache/Parse_Dn.js',\\n    themecache: 'hiker://files/cache/MyTheme.json',\\n    jiexicache: 'hiker://files/cache/MyJiexi.json',\\n    x5cache: 'hiker://files/cache/Parse_Dn.html',\\n    oldConfig: 'hiker://files/cache/MyParseSet.json',\\n    ckLink: 'https://code.aliyun.com/AI957/Hiker/raw/master/v/',\\n    cj: 'https://code.aliyun.com/AI957/Hiker/raw/master/v/CloudParse-V2_Dn.js',\\n    x5Url: 'https://code.aliyun.com/AI957/Hiker/raw/master/v/Parse_Dn.html',\\n    parseRoute: 'hiker://files/rules/DuanNian/MyParse.json',\\n    x5Route: 'file:///storage/emulated/0/Android/data/com.example.hikerview/files/Documents/cache/Parse_Dn.html'\\n};\\nvar MyParseS = {};\\nvar mySet = _mySet;\\nif (fileExist(_mySet.parseRoute)) {\\n    eval('var parseFile =' + fetch(_mySet.parseRoute));\\n    MyParseS = parseFile.codes;\\n    mySet = parseFile.settings;\\n}\\nvar parseTitle = [\\n    \\\"yun1717\\\",\\n    \\\"PanGu\\\",\\n    \\\"FuXing\\\",\\n    \\\"defaultParse\\\",\\n    \\\"道长仓库通免\\\",\\n    \\\"defaultParseWeb\\\",\\n    \\\"OK解析\\\",\\n    \\\"M3U8TV\\\",\\n];\\n//－－－=^_^=\\n\\n//接口设置.\\n\\nvar setUrl = \\\"hiker://page/Route?rule=MyFieldᴰⁿ&type=设置#noRecordHistory#\\\";\\nvar set_switch = setUrl;\\nvar lazy = `eval('var config =' + fetch(getVar('oldConfig')));eval(fetch(config.cj));aytmParse(input)`;\\n\\n//var parwix = `var yurl='https://daili.mayixiongdi.cn/?url=';Referer': 'https://www.mayixiongdi.cn/ys?id=';'https://daili.mayixiongdi.cn/api.php', 'Referer':'https://daili.mayixiongdi.cn';\\n// 全民https://pcvideoaliyun.tianshangrenjian.mgtv.com.88wuma.com/?url=\\n\\n//－－－备 用－－－\\n/*\\n * 影视工场： https://ysgc.cc/\\n * 江湖: 555电影 https://www.555dy2.com/phone.html ｜ 17看 http://17kanyy.cn/ http://jhjiexi.30vr.cn/?url= ｜ http://api.maizimall.com/index.php?url=\\n * 江湖: http://www.tianshuyun.net/index.php/vod/play/id/448377/sid/1/nid/1.html\\n * 江湖2: http://98hyk.cn/index.php/vod/play/id/72841/sid/1/nid/1.html\\n * 人人迷: https://vip.susou.tv/player/?url= ｜ https://www.momdm.cc/\\n *\\n * wuigen: https://www.5igen.com/dmplayer/player/?url=\\n * 干饭(人人迷): https://jx.zui.cm/?url=\\n * https://2.66movie.top/player/?url=\\n *\\n */\\n\\n\\nvar tools = {\\n    MD5: function(data) {\\n        eval(getCryptoJS());\\n        return CryptoJS.MD5(data).toString(CryptoJS.enc.Hex);\\n    },\\n    AES: function(text, key, iv, isEncrypt) {\\n        eval(getCryptoJS());\\n        var key = CryptoJS.enc.Utf8.parse(key);\\n        var iv = CryptoJS.enc.Utf8.parse(iv);\\n        if (isEncrypt) {\\n            return CryptoJS.AES.encrypt(text, key, {\\n                iv: iv,\\n                mode: CryptoJS.mode.CBC,\\n                padding: CryptoJS.pad.Pkcs7\\n            }).toString();\\n        };\\n        return CryptoJS.AES.decrypt(text, key, {\\n            iv: iv,\\n            padding: CryptoJS.pad.Pkcs7\\n        }).toString(CryptoJS.enc.Utf8);\\n    },\\n    //ascii\\n    nextCharacter: function(asciiValue, k) {\\n        var s = asciiValue;\\n        return String.fromCharCode(s + k);\\n    },\\n    //凯撒\\n    caesarCipher: function(stringValue, k) {\\n        var newString = \\\"\\\";\\n        for (var i = 0; i < stringValue.length; i++) {\\n            newString += this.nextCharacter(stringValue[i].charCodeAt(), k);\\n        }\\n        return newString;\\n    },\\n    nowDate: function() {\\n        var date1 = new Date();\\n        var dateStr = \\\"\\\";\\n        if (date1) {\\n            dateStr = date1.getFullYear();\\n            var month = date1.getMonth() + 1;\\n            var day = date1.getDate();\\n            if (month < 10) {\\n                dateStr += \\\"-0\\\" + month;\\n            } else {\\n                dateStr += \\\"-\\\" + month;\\n            }\\n            if (day < 10) {\\n                dateStr += \\\"-0\\\" + day;\\n            } else {\\n                dateStr += \\\"-\\\" + day;\\n            }\\n        }\\n        return dateStr;\\n    },\\n    toJSON: function(json) {\\n        return JSON.stringify(json, (key, value) => {\\n            if (typeof value == 'function') {\\n                return value.toString();\\n            } else {\\n                return value;\\n            }\\n        }, 4);\\n    },\\n    toVNum: function(a) {\\n        var a = a.toString();\\n        var c = a.split('.');\\n        var num_place = [\\\"\\\", \\\"0\\\", \\\"00\\\", \\\"000\\\", \\\"0000\\\"],\\n            r = num_place.reverse();\\n        for (var i = 0; i < c.length; i++) {\\n            var len = c[i].length;\\n            c[i] = r[len] + c[i];\\n        }\\n        var res = c.join('');\\n        return res;\\n    },\\n    cprVersion: function(a, b) {\\n        var _a = parseInt(this.toVNum(a)),\\n            _b = parseInt(this.toVNum(b));\\n        b = isNaN(_b) ? version : b;\\n        if (_a > _b) {\\n            putVar('jxNewV', '有新版本: ' + a);\\n        } else {\\n            clearVar('jxNewV');\\n        }\\n        putVar('jxOldV', b);\\n    }\\n};\\nif (getVar(\\\"jxOldV\\\", \\\"0\\\") != version) {\\n    putVar('cjCache', _mySet.cjcache);\\n    putVar('x5Cache', _mySet.x5Cache);\\n    putVar('oldConfig', _mySet.oldConfig);\\n    putVar('parseRoute', _mySet.parseRoute);\\n    let jxNewV = fetch('https://gitee.com/Duan-Nian/Dn/raw/master/hikerview/ParseVersion.txt'),\\n        jxOldV = (fetch(_mySet.cjcache).split('version = \\\"')[1] + '').split('\\\"')[0];\\n    tools.cprVersion(jxNewV, jxOldV);\\n}\\n\\nvar ParseS = {};\\nvar originalParseS = {\\n    // updateDate: updateDate,\\n    parseLc:'https://code.aliyun.com/AI957/Hiker/raw/master/p/parseLc.js',\\n    CityIP: 'http://pv.sohu.com/cityjson',\\n    pcUA: 'User-Agent@Mozilla/5.0 (Windows NT 10.0\\\\；\\\\； WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.87 Safari/537.36',\\n    cacheM3u8: function(vUrl, ref) {\\n        try {\\n            var m3u8 = fetch(vUrl, {});\\n            writeFile('hiker://files/cache/videos.m3u8', m3u8);\\n        } catch (e) {}\\n        return 'file:///storage/emulated/0/Android/data/com.example.hikerview/files/Documents/cache/videos.m3u8#';\\n    },\\n    defaultParse: function(url,timeout) {\\n        return ParseS.defaultParseWeb(url,timeout);\\n    },\\n    defaultParseWeb: function(playUrl,timeout,extra) {\\n        // log('传入defaultParseWeb的超时:'+timeout);\\n        timeout = parseInt(timeout)||5000;\\n        extra = extra||{};\\n        let playUrlList = extra.playUrlList||[];\\n        if(typeof(playUrlList)==='object'&&playUrlList.length>0){\\n            playUrlList.unshift(playUrl);\\n            log('开始批量解析(已去重):'+extra.nameList);\\n            const {LazyParseFast} = $.require('hiker://page/globalParse?rule=道长仓库Pro');\\n            let ret = LazyParseFast(playUrlList,timeout,timeout);\\n            if(typeof(ret)==='object'&&ret.length>0){\\n                return ret[0]\\n            }else{\\n                return ret\\n            }\\n        }else{\\n            const {lazyParse} = $.require('hiker://page/globalParse?rule=道长仓库Pro');\\n            let x5Play=lazyParse(playUrl,timeout);\\n            if(typeof(x5Play)==\\\"undefined\\\"||!x5Play){\\n                return \\\"toast://道长仓库解析失败\\\"\\n            }\\n            let tips=/x5Rule/.test(x5Play)?\\\"x5免嗅开始\\\":\\\"极速免嗅探完毕，地址:\\\"+(/^http/.test(x5Play)?x5Play:'非正常链接');\\n            log(tips);\\n            return x5Play;\\n        }\\n    },\\n    maoss: function(jxurl, ref) {\\n        try {\\n            var getVideoInfo = function(text) {\\n                return tools.AES(text, key, iv);\\n            };\\n            if (ref) {\\n                var html = request(jxurl, {\\n                    headers: {\\n                        'Referer': ref\\n                    }\\n                });\\n            } else {\\n                var html = request(jxurl);\\n            }\\n            if (html.indexOf('&btwaf=') != -1) {\\n                html = request(jxurl + '&btwaf' + html.match(/&btwaf(.*?)\\\"/)[1], {\\n                    headers: {\\n                        'Referer': ref\\n                    }\\n                })\\n            }\\n            var iv = html.split('bt_token = \\\"')[1].split('\\\"')[0];\\n            eval(html.match(/var config = {[\\\\s\\\\S]*?}/)[0] + '');\\n            if (config.url.slice(0, 4) != 'http') {\\n                config.url = decodeURIComponent(tools.AES(config.url, \\\"dvyYRQlnPRCMdQSe\\\", iv));\\n            }\\n            return config.url;\\n        } catch (e) {\\n            return '';\\n        }\\n    },\\n    LLQ: function(jxurl) {\\n        try {\\n            var api = jxurl.split('?url=')[0] + \\\"api.php\\\";\\n            var b64id = base64Encode(jxurl.split('url=')[1]);\\n            var parseid = tools.caesarCipher(b64id, -1);\\n            var json = JSON.parse(request(api, {\\n                headers: {\\n                    'Referer': jxurl\\n                },\\n                method: 'POST',\\n                body: 'url=' + parseid\\n            }));\\n            url = (json.code == 200 ? base64Decode(tools.caesarCipher(json.url, -1)) : '');\\n            return url;\\n        } catch (e) {\\n            return '';\\n        }\\n    },\\n    PanGu: function(vipUrl, data) {\\n        try {\\n            /*var ref = 'https://www.pangujiexi.com/';\\n            var parse = 'https://panguapi.ntryjd.net/jiexi/?url=' + vipUrl;\\n            var api = 'https://panguapi.ntryjd.net/jiexi/api.php';\\n            */\\n            //var ref = 'https://xmystv.com/';\\n            //var parse = 'https://www.99kpw.com/pangu/index.php?url=' + tailUrl;\\n            //var api = 'https://www.99kpw.com/pangu/api.php';\\n            var parse = 'https://www.pangujiexi.com/pangu/?url=' + vipUrl;\\n            var api = 'https://panguapi.ntryjd.net/pangu2021/api.php';\\n            if (data) {\\n                ref = data[0];\\n                parse = data[1];\\n                api = data[2];\\n            }\\n            var Time = (Math.floor(new Date().getTime() / 1000) * 1).toString();\\n            var url = JSON.parse(request(api, {\\n                headers: {\\n                    'Referer': parse\\n                },\\n                body: 'url=' + vipUrl + '&referer=' + base64Encode(parse) + '&ref=1&time=' + Time + '&type=&other=' + base64Encode(vipUrl) + '&ios=0',\\n                method: 'POST'\\n            })).url;\\n            return url;\\n        } catch (e) {\\n            return '';\\n        }\\n    },\\n    yun1717: function (vipUrl) {\\n        var isyk = vipUrl.indexOf('youku');\\n        var ref = \\\"https://www.1717yun.com/jx/ty.php?url=\\\" + vipUrl;\\n        var parse = \\\"https://1717yun.com.zh188.net/0828/?url=\\\" + vipUrl;\\n        var api = \\\"https://1717yun.com.zh188.net/1004/..index..php\\\";\\n        return isyk == -1 ? this.PanGu(vipUrl, [ref, parse, api]) : this.PanGu(vipUrl, [ref + ',vip:', parse + ',vip:', api]);\\n    },\\n    OK解析:'https://okjx.cc/?url=',\\n    M3U8TV:'https://jx.m3u8.tv/jiexi/?url=',\\n    道长仓库通免:function (url,timeout){\\n        return ParseS.defaultParseWeb(url,timeout);\\n    },\\n    FuXing: function(vipUrl) {\\n        try {\\n            //if(vipUrl.indexOf('v.youku')!=-1){\\n            //    vipUrl = (JSON.parse(request(vipUrl, {redirect:false, withHeaders:true})).headers.location + '').replace(/\\\\?.*/,'');\\n            //}\\n            var ref = 'https://jx.xuetuiguang.cn/jiexi/?url=' + vipUrl;\\n            var parse = ref;\\n            var api = 'https://jx.xuetuiguang.cn/jiexi/apiu_fx.php';\\n            return this.PanGu(vipUrl, [ref, parse, api]);\\n        } catch (e) {\\n            return '';\\n        }\\n    },\\n};\\n\\nObject.assign(ParseS, originalParseS, MyParseS);\\n//覆盖顺序，第三个覆盖第二个然后覆盖第一个\\n\\n\\nfunction aytmParse(vipUrl,strTitle,timeout,playUrl) {\\n    // 参数1:正版网址地址 参数2 定向解析接口名称 参数3 x5解析超时 参数4 完整的播放链接\\n    strTitle = strTitle||'';\\n    playUrl=playUrl||'';\\n    // log('传入aytmParse的超时:'+timeout);\\n    timeout = parseInt(timeout)||5000;\\n\\n    //-------------------------------------------------\\n    let jxsRoute = \\\"hiker://files/cache/MyJiexi.json\\\";\\n    let MyJiexi = {};\\n    let jiexis = {};\\n    try {\\n        MyJiexi = JSON.parse(fetch(jxsRoute));\\n        jiexis = MyJiexi.jiexis.filter(it=>it.name===MyJiexi.now)[0];\\n    }catch (e) {}\\n    function getPlayJx(key){\\n        let playUrlList = [];//批量播放地址列表\\n        let nameList = [];\\n        let jxs = jiexis[key]; // 适用于这个网站的解析列表\\n        if(jxs){\\n            for(let i in jxs){\\n                if(typeof ParseS[jxs[i]] == 'string'&&ParseS[jxs[i]].match(/http.*?=/)){\\n                    playUrlList.push(ParseS[jxs[i]]+vipUrl);\\n                    nameList.push(jxs[i]);\\n                }\\n            }\\n        }\\n        // return playUrlList\\n        return {playUrlList:playUrlList,nameList:nameList}\\n    }\\n    let extra = {};\\n    //-------------------------------------------------------\\n    if(!strTitle){\\n        var host;\\n        try{\\n            host = vipUrl.match(/\\\\.(.*?)\\\\//)[1];\\n        }catch(e){\\n            if(!/^http/.test(playUrl)){\\n                return \\\"断插调用失败！\\\\n非正常的vip正版地址且未识别原站解析播放地址\\\";\\n            }else{\\n                return ParseS.道长仓库通免(playUrl,timeout)\\n            }\\n        }\\n        //log(host);\\n        switch (mySet.qju) {\\n            case \\\"默认\\\":\\n                switch (host) {\\n                    case \\\"qq.com\\\":\\n                        str = mySet.tx;\\n                        extra = getPlayJx('tx');\\n                        break;\\n                    case \\\"iqiyi.com\\\":\\n                        str = mySet.qy;\\n                        extra = getPlayJx('qy');\\n                        break;\\n                    case \\\"youku.com\\\":\\n                        str = mySet.yk;\\n                        extra = getPlayJx('yk');\\n                        break;\\n                    case \\\"alizy\\\":\\n                        str = mySet.al;\\n                        extra = getPlayJx('al');\\n                        break;\\n                    case \\\"mgtv.com\\\":\\n                        str = mySet.mg;\\n                        extra = getPlayJx('mg');\\n                        break;\\n                    case \\\"bilibili.com\\\":\\n                        str = mySet.bl;\\n                        extra = getPlayJx('bl');\\n                        break;\\n                    case \\\"sohu.com\\\":\\n                        str = mySet.sh;\\n                        extra = getPlayJx('sh');\\n                        break;\\n                    case \\\"tv.sohu.com\\\":\\n                        str = mySet.sh;\\n                        extra = getPlayJx('sh');\\n                        break;\\n                    case \\\"ixigua.com\\\":\\n                        str = mySet.xg;\\n                        extra = getPlayJx('xg');\\n                        break;\\n                    case \\\"pptv.com\\\":\\n                        str = mySet.pp;\\n                        extra = getPlayJx('pp');\\n                        break;\\n                    case \\\"miguvideo.com\\\":\\n                        str = mySet.mi;\\n                        extra = getPlayJx('mi');\\n                        break;\\n                    case \\\"le.com\\\":\\n                        str = mySet.le;\\n                        extra = getPlayJx('le');\\n                        break;\\n                    case \\\"1905.com\\\":\\n                        str = mySet.one;\\n                        extra = getPlayJx('one');\\n                        break;\\n                    case \\\"fun.tv\\\":\\n                        str = mySet.fun;\\n                        extra = getPlayJx('fun');\\n                        break;\\n                    default:\\n                        str = mySet.oth;\\n                        break;\\n                }\\n                break;\\n            default:\\n                str = mySet.qju;\\n                break;\\n        }\\n    }else{\\n        log('段插执行定向解析线路头:'+strTitle);\\n        str = strTitle;\\n    }\\n    let withBatch = !!(MyJiexi.isAuto && MyJiexi.autoMode === '速度优先');\\n    if (typeof ParseS[str] == 'function') {\\n        if(/通免/.test(str)){\\n            return ParseS[str](vipUrl,timeout);\\n        }\\n        var url = ParseS[str](vipUrl);\\n        if (/^\\\\//.test(url)) {\\n            url = 'https:' + url\\n        }\\n        if (/=http/.test(url)) {\\n            url = /&url=/.test(url) ? url : 'http' + decodeURIComponent(url.split('=http')[1]);\\n        }\\n        /*if(url.match(/mgtv.com/g)=='mgtv.com'){\\n            url = url + ';{Referer@https://www.mgtv.com}';\\n        } else */\\n        if (/\\\\.flv/.test(url)) {\\n            url = url + ';{User-Agent@app&&Referer@' + vipUrl + '}';\\n        }\\n        if (url === '' || url === vipUrl) {\\n            return vipUrl;\\n        } else {\\n            return url + '#isVideo=true#';\\n        }\\n    } else if (typeof ParseS[str] == 'string'&&ParseS[str].match(/http.*?=/)) {\\n        // log(\\\"断插开始通用执行免嗅 defaultParseWeb:\\\"+timeout);\\n        //log(\\\"默认x5\\\"+ParseS.defaultParseWeb);\\n        if(withBatch){\\n            if(typeof(extra.playUrlList)==='object'&&extra.playUrlList.length>0){\\n                extra.playUrlList = extra.playUrlList.filter(it=>it!==(ParseS[str]||str) + vipUrl);\\n                let nameList = extra.nameList;\\n                nameList.unshift(str);\\n                function unique2(array){\\n                    return Array.from(new Set(array));\\n                }\\n                extra.nameList=unique2(nameList);\\n                extra.playUrlList = unique2(extra.playUrlList);\\n            }\\n        }else{\\n            extra = {}\\n        }\\n        return ParseS.defaultParseWeb?ParseS.defaultParseWeb((ParseS[str]||str) + vipUrl,timeout,extra):(ParseS[str]||str) + vipUrl;\\n    } else if(typeof(str)==='string'&&str.length>1&&(typeof ParseS[str]=='undefined'||!ParseS[str])&&!/^http/.test(str)){\\n        return 'toast://请进行断插配置,推荐拉取道长精选!\\\\n检测到无效的解析配置:'+str;\\n    }else {\\n        return ParseS.defaultParse(str + vipUrl,timeout);\\n    }\\n}\\n\\nvar playParse = {\\n    player_xx: function(jurl, Label) {\\n        return $(jurl).lazyRule((k) => {\\n            var jsUrl = JSON.parse(fetch(getVar('oldConfig'))).cj;\\n            var Label = k;\\n            var fa = ['letv', 'pptv', 'qq', 'youku', 'qiyi', 'iqiyi', 'mgtv', 'bilibili', 'sohu', 'migu', 'm1905', 'vip'];\\n            var html = parseDom(request(input), Label);\\n            eval(html.replace(/player_.*?={/, 'pdata={'));\\n            eval(fetch(jsUrl));\\n            if (pdata.url.substr(0, 8).match(/JT..JT../)) {\\n                pdata.url = base64Decode(pdata.url);\\n            }\\n            if (pdata.url.substr(0, 8).match(/%..%../)) {\\n                pdata.url = unescape(pdata.url);\\n            }\\n            if (fa.includes(pdata.from)) {\\n                return aytmParse(pdata.url);\\n            } else {\\n                return pdata.url + '#isVideo=true#';\\n            }\\n        }, Label)\\n    }\\n};\\nfunction mzPopup() {\\n    if (getVar(\\\"ijk-tx\\\", \\\"\\\") == \\\"1\\\") {\\n        setItem(\\\"tixing\\\", \\\"1\\\")\\n        clearVar(\\\"ijk-tx\\\")\\n    }\\n    if (getItem(\\\"tixing\\\", \\\"\\\") == \\\"\\\") {\\n        confirm({\\n            title: '免责声明',\\n            content: '本程序不提供视频解析服务\\\\n所有内容均从用户分享中收集\\\\n仅供测试和学习交流\\\\n\\\\n确定即认可，不再提醒',\\n            confirm: $.toString(() => {\\n                putVar(\\\"ijk-tx\\\", \\\"1\\\");\\n                refreshPage(false);\\n                return \\\"toast://点击了确认\\\"\\n\\n            })\\n        })\\n    }\\n}\\nif (!getVar(\\\"tixing\\\")) {\\n    mzPopup();\\n    putVar('tixing','ok');\\n}\\n\\nfunction saveButton(content,name) {\\n    name = name||'';\\n    var data = content.split('★★★');\\n    if (data.length === 2) {\\n        var _dt = parsePaste(data[0]);\\n        content = _dt.substr(0, 6) !== 'error:' ? _dt : '';\\n    }\\n    data = content.split('★');\\n    var type = data[0];\\n    var arrList = [];\\n    var objCode = {};\\n    if (data.length > 2 && data[0] !== '直链') {\\n        var objKey = data[1];\\n        var objValue = data[2];\\n        if (type === 'MyParseS') {\\n            objValue = base64Decode(objValue);\\n        }\\n        if (objValue.split('function').length > 1) {\\n            eval('objValue=' + objValue);\\n        }\\n        arrList.splice(0, 0, objKey); //添加项目非删除\\n        objCode[objKey] = objValue;\\n\\n    } else if (type === '直链') {\\n        arrList = data;\\n        arrList.splice(0, 1);\\n    } else {\\n        arrList = null;\\n    }\\n    if (arrList != null) {\\n        var parseRoute = getVar('parseRoute');\\n        eval('var json =' + fetch(parseRoute));\\n        Array.prototype.remove = function(val) {\\n            let index = this.indexOf(val);\\n            if (index > -1) {\\n                this.splice(index, 1);\\n            }\\n        };\\n        if(name){//删除名称列表和代码\\n            json.title.remove(name);\\n            delete json.codes[name];\\n        }\\n        arrList = arrList.concat(json.title);\\n        json.title = Array.from(new Set(arrList));\\n        Object.assign(json.codes, objCode);\\n        if (type === '测试') {\\n            eval('var config =' + fetch(getVar('oldConfig')));\\n            eval(fetch(config.cj));\\n            if (typeof ParseS[data[1]] == \\\"function\\\") {\\n                return ParseS[data[1]](data[2]);\\n            } else {\\n                return ParseS.defaultParseWeb(ParseS[data[1]] + data[2]);\\n            }\\n        } else {\\n            writeFile(parseRoute, $.stringify(json));\\n            return \\\"toast://已保存内容\\\";\\n        }\\n    } else {\\n        return \\\"toast://无法识别这个内容呢\\\"\\n    }\\n}\\n// 以下代码千万不要放出来否则报错\\nif (getItem('updateDate') != updateDate) {\\n// if (true) {\\n    // 把function变成string\\n    let functionCode = saveButton + ';'+mzPopup;\\n    // writeFile('hiker://files/cache/plscParse.html', fetch(_mySet.ckLink + 'plscParse.html'));\\n    setItem('myFunction', functionCode);\\n    setItem('updateDate', updateDate);\\n}\\nvar bjItem = {\\n    hfPlugin: function(parseRoute) {\\n        return $('#noLoading#').lazyRule((k) => {\\n            if (fileExist(k)) {\\n                var cjcache = getVar('cjCache');\\n                eval('var json =' + fetch(k));\\n                json.settings.cj = cjcache;\\n                writeFile(k, $.stringify(json));\\n                var oldRoute = getVar('oldConfig');\\n                var oldConfig = json.settings;\\n                oldConfig.cj = cjcache;\\n                writeFile(oldRoute, $.stringify(oldConfig));\\n                refreshPage(false);\\n                return 'toast://恢复成功';\\n            } else {\\n                return 'toast://需要先拉取列表'\\n            }\\n        }, parseRoute)\\n    },\\n    pullCode: function(k) {\\n        return $('#noLoading#').lazyRule((k) => {\\n            var pullMode = k[0];\\n            var parseRoute = k[1];\\n            var parseFile = fetch(parseRoute);\\n            if (!parseFile) {\\n                var settings = fetch(getVar('oldConfig'));\\n                settings = !settings ? {} : JSON.parse(settings);\\n                var json = {};\\n                json.settings = settings;\\n                json.title = [];\\n                json.codes = {};\\n            } else {\\n                eval('var json =' + parseFile);\\n            }\\n            var parseTitle = [];\\n            var parseCode={};\\n            var cjLink = getVar('pluginLink');\\n            try {\\n                if(/@base64:\\\\/\\\\//.test(cjLink)){\\n                    eval(base64Decode(cjLink.split('@base64://')[1]));\\n                }else if(/插件名/.test(cjLink)){\\n                    let realLink = cjLink.split('插件名')[0].replace(/[\\\\s]/g,'');\\n                    log('解析云剪切板:'+realLink);\\n                    let yPaste = parsePaste(realLink);\\n                    if(/@base64:\\\\/\\\\//.test(yPaste)){\\n                        try {\\n                            eval(base64Decode(yPaste.split('@base64://')[1]));\\n                            if(typeof ParseS==='undefined'){\\n                                return 'toast://拉取个鸡毛插件,里面连ParseS对象都没有!'\\n                            }\\n                        }catch (e) {\\n                            return 'toast://鸡毛插件执行报错:\\\\n'+e.message;\\n                        }\\n                    }else{\\n                        return 'toast://未能识别云剪切板中的内容:\\\\n'+yPaste.substring(0,100);\\n                    }\\n                } else if (cjLink === 'Q神') {\\n                    let jiexi = fetch('hiker://files/jiexi/jiexi.txt').split('\\\\n');\\n                    for (i in jiexi) {\\n                        let title=jiexi[i].split('&&')[0];\\n                        let code=jiexi[i].split('&&')[1];\\n                        parseTitle.push(title);\\n                        parseCode[title]=code;\\n                    }\\n                }\\n                // }else if(/^#[a-zA-Z0-9]{2,10}$/.test(cjLink)){//福利口令2到10位\\n                else if(/^#[\\\\S]{2,10}$/.test(cjLink)){//福利口令2到10位任意非空字符串\\n                    const {taskCall, taskRun,taskReq} = $.require(\\\"hiker://page/taskCall?rule=道长仓库Pro\\\");\\n                    // log('开始执行任务仓库获取断念插件福利口令');\\n                    let result = taskCall(17,'DnFuli',[cjLink]);\\n                    if (result.status === 0) {\\n                        let ret = JSON.parse(result.result);\\n                        // log(ret);\\n                        if(ret.opt==='error'){\\n                            return 'toast://'+ret.msg;\\n                        }else if(ret.opt==='url'){\\n                            let html = fetch(ret.ret);\\n                            let arr = html.includes('http')? html:base64Decode(html);\\n                            let jiexi = arr.match(/[\\\\S]*?,.*?[\\\\s]/g);\\n                            for (let i in jiexi) {\\n                                let title=jiexi[i].split(',')[0];\\n                                let code=jiexi[i].split(',')[1].split(\\\"\\\\n\\\")[0];\\n                                parseTitle.push(title);\\n                                parseCode[title]=code;\\n                            }\\n                        }else if(ret.opt==='jx'){\\n                            if(/[\\\\S]*?,http[\\\\S]/.test(ret.ret)){\\n                                let title = ret.ret.split(',')[0];\\n                                let code = ret.ret.split(',')[1].split('\\\\n')[0];\\n                                parseTitle.push(title);\\n                                parseCode[title]=code;\\n                            }else if(/^http/.test(ret.ret)){\\n                                let title = cjLink.split('#')[1];\\n                                let code = ret.ret.split('\\\\n')[0];\\n                                parseTitle.push(title);\\n                                parseCode[title]=code;\\n                            }else{\\n                                return 'toast://未知的福利:\\\\n'+ret.ret;\\n                            }\\n                        }else if(ret.opt==='vipJx'){\\n                            let title = cjLink.split('#')[1];\\n                            let code = ret.ret;\\n                            // log(code);\\n                            parseTitle.push(title);\\n                            parseCode[title]=/function/.test(code)?eval(code):code;\\n                        }\\n                    }else{\\n                        return 'toast://仓库非最新版或者福利社功能开发中'\\n                    }\\n                }else if(cjLink==='断插'){\\n                    eval(fetch(\\\"hiker://files/cache/Parse_Dn.js\\\"));\\n                    parseTitle=Object.keys(ParseS);\\n                }else if(/^hiker:\\\\/\\\\/|^file:\\\\/\\\\/|^http|^\\\\/storage\\\\/|^\\\\/sdcard\\\\//.test(cjLink)){\\n                    if(/^\\\\/storage\\\\/|^\\\\/sdcard\\\\//.test(cjLink)){\\n                        cjLink = 'file://'+cjLink;\\n                    }\\n                    eval(fetch(cjLink));\\n                    parseTitle=Object.keys(ParseS);\\n                }else{\\n                    return 'toast://拉取口令有误'\\n                }\\n            } catch (e) {\\n                log(e.message);\\n            }\\n            var jxJudge = typeof ParseS == 'object';\\n            var lbJudge = typeof(parseTitle) == 'object';\\n            if (jxJudge || lbJudge) {\\n                // if (pullMode === '列表') {\\n                //     if (!lbJudge) {\\n                //         parseTitle = Object.keys(ParseS);\\n                //     }\\n                //     var newParseTitle = json.title.concat(parseTitle);\\n                //     json.title = Array.from(new Set(newParseTitle));\\n                // }\\n                // 不管拉取代码还是列表都要把列表拉了\\n                if (!lbJudge) {\\n                    parseTitle = Object.keys(ParseS);\\n                    log(parseTitle);\\n                }\\n                var scObject = [\\\"CityIP\\\", \\\"pcUA\\\", \\\"cacheM3u8\\\", \\\"defaultParse\\\",\\\"defaultParseWeb\\\",\\\"maoss\\\", \\\"LLQ\\\",\\\"parseLc\\\"];\\n                parseTitle = parseTitle?parseTitle.filter(it=>!scObject.includes(it)):[];\\n                var newParseTitle = json.title.concat(parseTitle);\\n                json.title = Array.from(new Set(newParseTitle));\\n\\n                if (pullMode === '代码') {\\n                    if (typeof originalParseS == 'object') {\\n                        for (let i in scObject) {\\n                            delete originalParseS[scObject[i]];\\n                        }\\n                        // originalParseS =originalParseS.filter(it=>!scObject.includes(Object.getOwnPropertyNames(it)[0]));\\n                        Object.assign(json.codes, originalParseS);\\n                    } else {\\n                        if(typeof(ParseS)==\\\"undefined\\\"){\\n                            Object.assign(json.codes, parseCode);\\n                            //return \\\"toast://没有代码，不可拉取\\\"\\n                        }else{\\n                            Object.assign(json.codes, ParseS);\\n                        }\\n                    }\\n                }\\n                //var newFile = tools.toJSON(json);//自定义stringify函数，带有转义字符\\n                var newFile = $.stringify(json); //JSON.parse会报错\\n                writeFile(parseRoute, newFile);\\n                refreshPage(false);\\n                return 'toast://拉取' + pullMode + '成功';\\n            } else {\\n                return 'toast://未获取到对象';\\n            }\\n        }, [k, _mySet.parseRoute])\\n    },\\n    pullScript: function(cj, x5) {\\n        return $('#noLoading#').lazyRule((k) => {\\n            var cjFrom = 'hiker://page/Parse_Dn.js?rule=MyFieldᴰⁿ';\\n            var x5From = 'hiker://page/Parse_Dn.html?rule=MyFieldᴰⁿ';\\n            try {\\n                var cjFile = JSON.parse(fetch(cjFrom)).rule;\\n                var x5File = JSON.parse(fetch(x5From)).rule;\\n                writeFile(k[0], cjFile);\\n                writeFile(k[1], x5File);\\n                clearVar('jxOldV');\\n                clearVar('jxNewV');\\n                refreshPage(false);\\n                return 'toast://拉取成功';\\n            } catch (e) {\\n                return 'toast://未成功获取内容';\\n            }\\n        }, [cj, x5])\\n    },\\n    xlSelect: function(bianji, lbLength) {\\n        return \\\"select://\\\" + JSON.stringify({\\n            options: ['‘‘’’<span style=\\\"color:red\\\" title=\\\"删除||' + bianji + '\\\">删 除', '‘‘’’<span style=\\\"color:#F57474\\\" title=\\\"隐藏||' + bianji + '\\\">隐 藏', '‘‘’’<span style=\\\"color:#FF8000\\\" title=\\\"修改||' + bianji + '\\\">修 改', '‘‘’’<span style=\\\"color:#098AC1\\\" title=\\\"置顶||' + bianji + '0' + '\\\">置 顶', '‘‘’’<span style=\\\"color:#098AC1\\\" title=\\\"移动||' + bianji + '\\\">移 动', '‘‘’’<span style=\\\"color:#098AC1\\\" title=\\\"置底||' + bianji + lbLength + '\\\">置 底', '‘‘’’<span style=\\\"color:#04B431\\\" title=\\\"分享||' + bianji + '\\\">地板分享', '‘‘’’<span style=\\\"color:#04B431\\\" title=\\\"云分享||' + bianji + '\\\">云板分享'],\\n            col: '2',\\n            js: $.toString(() => {\\n                var parseRoute = getVar('parseRoute');\\n                eval('var json =' + fetch(parseRoute));\\n                var newInput = parseDomForHtml(input, 'span&&title').split('||');\\n                var type = newInput[0];\\n                var name = newInput[1];\\n                var num = newInput[2];\\n                var num2 = newInput[3];\\n                switch (type) {\\n                    case \\\"删除\\\":\\n                        return $(\\\"即将删除: \\\" + name).confirm((k) => {\\n                            var name = k[0];\\n                            var num = k[1];\\n                            var parseRoute = getVar('parseRoute');\\n                            eval('var json =' + fetch(parseRoute));\\n                            if (json.codes.hasOwnProperty(name)) {\\n                                delete json.codes[name];\\n                            }\\n                            json.title.splice(num, 1);\\n                            writeFile(parseRoute, $.stringify(json));\\n                            refreshPage(false);\\n                            return \\\"toast://已将〖\\\" + name + \\\"〗删除\\\";\\n                        }, [name, num]);\\n                    case \\\"隐藏\\\":\\n                        return $(\\\"hiker://empty#noLoading#\\\").lazyRule((k) => {\\n                            var name = k[0];\\n                            var num = k[1];\\n                            var parseRoute = getVar('parseRoute');\\n                            eval('var json =' + fetch(parseRoute));\\n                            if (json.codes.hasOwnProperty(name)) {\\n                                json.title.splice(num, 1);\\n                                writeFile(parseRoute, $.stringify(json));\\n                                refreshPage(false);\\n                                return \\\"toast://已将〖\\\" + name + \\\"〗隐藏\\\";\\n                            } else {\\n                                return \\\"toast://可能是个网址, 您可选择删除\\\";\\n                            }\\n                        }, [name, num]);\\n                    case \\\"修改\\\":\\n                        //if (json.codes[name]) {\\n                        var nCode = name;\\n                        var nName = \\\"这是名称\\\";\\n                        if (json.codes[name]) {\\n                            nCode = json.codes[name].toString();\\n                            nName = name;\\n                        }\\n                        return $(\\\"hiker://empty#noRecordHistory#\\\").rule((k) => {\\n                            var d = [];\\n                            eval(getItem('myFunction'));\\n                            var name = k[0];\\n                            var code = k[1];\\n                            d.push({\\n                                title: '保 存',\\n                                url: saveButton + \\\"saveButton(getVar('input_edit'),name);back();\\\",\\n                                col_type: \\\"input\\\",\\n                                desc: \\\"建议按默认的代码格式修改哦\\\",\\n                                extra: {\\n                                    onChange: \\\"putVar('input_edit', input)\\\",\\n                                    type: \\\"textarea\\\",\\n                                    height: \\\"-1\\\",\\n                                    titleVisible: false,\\n                                    defaultValue: '修改★' + name + '★' + code,\\n                                }\\n                            });\\n                            d.push({\\n                                title: '‘‘’’<small><span style=\\\"color:#6EB897\\\">格式为：操作类型★标题★function(){自定义内容}<br>请勿填入其他格式',\\n                                url: $('#noLoading#').lazyRule((saveButton,name) => {\\n                                    let code = saveButton(getVar('input_edit'),name);\\n                                    back();\\n                                    return 'toast://已保存修改\\\\n请自行检测解析是否有被覆盖的内容';\\n                                    // if(typeof(code)==='string'&&code.length>2){\\n                                    //     return code\\n                                    // }else{\\n                                    //     return 'toast://已保存修改';\\n                                    // }\\n                                }, saveButton,name),\\n                                desc: '‘‘’’<big><big><span style=\\\"color:#298A08\\\">保 存',\\n                                col_type: 'text_center_1'\\n                            });\\n                            setResult(d);\\n                        }, [nName, nCode]) //[name, json.codes[name].toString()])\\n                    /*} else {\\n                        return \\\"toast://只有网址或者标题, 不支持修改\\\"\\n                    }*/\\n                    case \\\"置顶\\\":\\n                    case \\\"置底\\\":\\n                        var item = json.title.splice(num, 1);\\n                        json.title.splice(num2, 0, item[0]);\\n                        writeFile(parseRoute, $.stringify(json));\\n                        refreshPage(false);\\n                        break;\\n                    case \\\"移动\\\":\\n                        return $('hiker://empty#noLoading#').lazyRule((k) => {\\n                            putVar('bianji', '移动#' + k);\\n                            refreshPage(false);\\n                            return input;\\n                        }, num);\\n                    case \\\"分享\\\":\\n                    case \\\"云分享\\\":\\n                        if (json.codes[name]) {\\n                            var parseText = typeof json.codes[name] == 'function' ? $.stringify(json.codes[name]) : json.codes[name];\\n                            parseText = 'MyParseS★' + name + '★' + base64Encode(parseText);\\n                        } else {\\n                            var parseText = '直链★' + json.title[num];\\n                        }\\n                        if (type == '云分享' && parseText.substr(0, 8) == 'MyParseS') {\\n                            parseText = sharePaste(parseText);\\n                            return parseText.substr(0, 6) != 'error:' ? 'copy://' + parseText + '\\\\n★★★\\\\n' + 'MyParseS：' + name : 'toast://分享失败!!云剪贴板可能挂了';\\n                        } else {\\n                            return 'copy://' + parseText;\\n                        }\\n                    default:\\n                        return 'toast://暂不支持';\\n                } //switch的\\n            }) //String的\\n        }) //stringify的\\n    },\\n    xjParse: function() {\\n        return $(\\\"hiker://empty#noHistory#\\\").rule(() => {\\n            var d = [];\\n            eval(getItem('myFunction'));\\n            d.push({\\n                title: '保 存',\\n                url: saveButton + \\\"saveButton(input);back();clearVar('input_add')\\\",\\n                col_type: \\\"input\\\",\\n                desc: \\\"输入正确格式内容\\\",\\n                extra: {\\n                    onChange: 'putVar(\\\"input_add\\\", input)',\\n                    type: \\\"textarea\\\",\\n                    height: \\\"-1\\\",\\n                    titleVisible: false,\\n                    defaultValue: getVar('input_add'),\\n                }\\n            });\\n            d.push({\\n                title: '‘‘’’<small><span style=\\\"color:#6EB897\\\">按描述诉格式输入, 请勿填入其他格式<br>本地口令: 操作类型★名称★代码<br>云口令: 链接★★★名称; 纯网址: 直链★url1★url2',\\n                desc: '‘‘’’<big><big><span style=\\\"color:#298A08\\\">保 存',\\n                url: $('noLoading').lazyRule((saveButton) => {\\n                    return saveButton(getVar('input_add'));\\n                }, saveButton),\\n                col_type: 'text_center_1'\\n            });\\n            setResult(d);\\n        })\\n    },\\n    ydParse: function(BJmode, i) {\\n        return $('#noLoading#').lazyRule((k) => {\\n            var A = k[0].split('#')[1];\\n            var B = k[1];\\n            var parseRoute = getVar('parseRoute');\\n            eval('var json =' + fetch(parseRoute));\\n            var item = json.title.splice(A, 1); // 1: 标记开始位置，2: 删除到哪个位置\\n            json.title.splice(B, 0, item[0]); // 1: 同上，2: 0表示不删除，3: 添加对象\\n            writeFile(parseRoute, $.stringify(json));\\n            clearVar('bianji');\\n            refreshPage(false);\\n            return 'hiker://empty';\\n        }, [BJmode, i])\\n    },\\n    plscParse: function() {\\n        return $('hiker://empty#noRecordHistory#').rule(() => {\\n            var d = [];\\n            d.push({\\n                title: '批量删除解析',\\n                desc: 'auto&&float',\\n                url: 'file:///storage/emulated/0/Android/data/com.example.hikerview/files/Documents/cache/plscParse.html',\\n                col_type: 'x5_webview_single'\\n            })\\n            setResult(d);\\n        })\\n    }\\n};\\n\\nfunction setParse() {\\n    $.require(\\\"hiker://page/Route?rule=MyFieldᴰⁿ\\\").setParse();\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"调用路由\",\"path\":\"Route\",\"rule\":\"js:\\nconst d = [];\\nconst data = {};\\n\\ndata.oldConfig = \\\"hiker://files/cache/MyParseSet.json\\\";\\ndata.cjRoute = \\\"hiker://files/cache/Parse_Dn.js\\\";\\ndata.x5Route = \\\"file:///storage/emulated/0/Android/data/com.example.hikerview/files/Documents/cache/Parse_Dn.html\\\";\\n\\n\\ndata.jxLazy = \\\"eval('var config =' + fetch('\\\" + data.oldConfig + \\\"'));eval(fetch(config.cj));aytmParse(input)\\\";\\n\\ndata.szParse = \\\"#noHistory#hiker://page/Route?rule=MyFieldᴰⁿ&type=设置\\\";\\n\\ndata.setParse = function() {\\n    d.push({\\n        desc: '795',\\n        url: this.x5Route,\\n        col_type: 'x5_webview_single'\\n    });\\n    var oldV = getVar('jxOldV');\\n    var newV = getVar('jxNewV');\\n    var versionTips = parseFloat(newV) > parseFloat(oldV) ? '‘‘有新版本: v' + newV : '‘‘';\\n    var pics = [\\n        'https://cdn.seovx.com/img/seovx-20-10%20(92).jpg',\\n        'https://cdn.seovx.com/img/mom2018%20(207).jpg',\\n        'https://tva4.sinaimg.cn/large/9bd9b167gy1fwrh5xoltdj21hc0u0tax.jpg',\\n        'https://tva1.sinaimg.cn/large/005BYqpggy1fwreyu4nl6j31hc0u0ahr.jpg',\\n        'https://s3.bmp.ovh/imgs/2021/10/d7e60b990742093d.jpeg',\\n        'https://s3.bmp.ovh/imgs/2021/10/91ad6d6538bf8689.jpg',\\n        'https://tva1.sinaimg.cn/large/005BYqpggy1fwresl5pmlj31hc0xcwka.jpg',\\n        'https://tva3.sinaimg.cn/large/005BYqpggy1fwrgjdk74oj31hc0u0dqn.jpg',\\n        'https://cdn.seovx.com/img/mom2018%20(320).jpg',\\n        'https://cdn.seovx.com/img/mom2018%20(803).jpg'\\n    ];\\n    d.push({\\n        img: pics[Math.floor(Math.random() * 10)],\\n        title: versionTips + '’’<small><span style=\\\"color:#6EB897\\\"><br>　　点击上方头像进入编辑<br>点此进入论坛帖子列表',\\n        desc: '当前版本: v' + oldV,\\n        url: 'https://haikuoshijie.cn/user/1958',\\n        col_type: 'movie_1'\\n    });\\n  setResult(d);\\n}\\n\\nswitch (getParam(\\\"type\\\")) {\\n    case \\\"设置\\\":\\n        data.setParse();\\n        //setResult(d);\\n        break;\\n    case \\\"编辑\\\":\\n        $.require(\\\"hiker://page/jxItem?rule=MyFieldᴰⁿ\\\").jxList();\\n        setResult(d);\\n        break;\\n\\tcase \\\"主题\\\":\\n\\t     $.require(\\\"hiker://page/theme?rule=MyFieldᴰⁿ\\\").themeInit();\\n        break;\\n\\tcase \\\"解析\\\":\\n\\t     $.require(\\\"hiker://page/jxManage?rule=MyFieldᴰⁿ\\\").jxManage();\\n        break;\\n    default:\\n        $.exports = data;\\n        break;\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"解析项主界面\",\"path\":\"jxItem\",\"rule\":\"var _0xodR='jsjiami.com.v6',_0x4855=[_0xodR,'w7FLw7kiJQ==','A8KvJC/DiQ==','R8Ktw5HDq8KSQcOO','w5/CgVvCri9Fwrl4XBRWw6rCig==','ITTCmcOwwp3CqA==','GQhGY8KJ','GMK1UsK/VA==','wpjCviRH','HAMQSw4=','AsKNHDvDqg==','ZcKRwoXCkw==','wp/Cmw5+woE=','IMO/PAnDjg==','woxnw5HDmCY=','woLCtQBFwoQ=','d8OoNW/Clw==','eRHCoSAi','JcOmbcOoAMOs','J8K8w5TDkxwyAg==','w7YzASM=','wqcJwprCjFU=','fQLCvSsJ','OMOBwpwVw6o=','w6DDrcOVDcOu','NsKEFTTDrg==','VMOvP8K7Kg==','OA5UQsKr','P8K2w43DkQ==','I3PDm8KA','GcKRNhXDvg==','w4PCl25qw6M=','PsO5b8OLGA==','K2rDu8KNajJucg==','EMKpw5XCssOYwo/DkcON','w6k2wpYI','NTXChcORwp8=','esOXAMKbLw==','wrhsFV1p','wpTCtwRWwp9CwqPDjQ==','KnHDgsKdfg==','U0XDk1xz','RsOfPwt2wrLDlg==','wroSwr/DqGbCqsOlUCvDkMKZw6bDiGsp','E8KHeMKjaw==','XcOJw4s+wrnDjmDCn8KmT8OSw4TChRXCuMOzwr3ClsKZHcK3w6XDh8O0Mg==','5omB5Y+65Lip5o2A5Lux5ZK+572E6aK76IeQ5p6I','J2PDkMKcWTRoaBsAJy1Y','5pO/5Lyu5oy25b6q','5ou65Y2A5Lql56C7','57+06L6h6KWU5pye','Kx95WMKeAQ==','5oOk5aWL5o6g5Lq96LeC5byz5Lql6buZ6K6v','Hyk9fTvDkgnDtH9p','6L2E5Yak5p2v5pWa5oyw5Lqx5Z6g5Z2r','AzUnTgXDgk3Ct2FuVsOjSF9oVhPCn2HCrjFqDDNBw4c=','4oOt4oGK4oGy4oKVwpHDq2tGVMKkwppWSBjDp8OlLOeZk+W9uuaNmeenrg==','5Lyc55a255ig5YWS5YiT6ICP6Z6C55iI5byF6KWl55aQ6K6k5Zyh6LS25Y63DOWnqOafpemUgemhvOWIn+W9puitt+Wfk+S5pOilreittuaApw==','wp3DosKqw4vCh8OeaMK+WlrCs3UgR8KiV33Dj1pMw7wyw5kaQMOtSwNBw4Fuw7QQTMKq','IcOwUsO4Kw==','wpvCiDFdwok=','w4XCt0jCsAg=','w4XDqU7CrcOu','w4rCs0rCiAM=','IMKmPUHCjA==','FcKUw5fCosOr','CyY3UA8=','Y2fDuRlB','HG3Dt8Odfw==','W8OgL37Dpw==','TcO1Hw5i','wpJFw4TDpg==','w7UqwosFZ8Kmw7/Dl24V','Whtaw5okw63DiWFnwqTCscOtPy5PwoUow6rCgwVkwqscNHREIcO0wqLCs8K+UsOhw67Cs0DDhsOZwpfDslwYEgzDvcOaUSvCpMOXPFfCpsOwA8KVwrR0w6xJw5LDnFHDmcK5wr7CgsKpw7QuwqbCmQQ8wrHDvXN0W37DtMKfGcOmJsOj4ba44oG2woVIwp7ClnclKQ0HHTVkJMOGPcOVwqnDnAjColUbw6bDiMOz','w5JUR8O1cw==','w4tbw6FEwqJtX0Q=','KVfDu8KkQw==','w5Q9wpQWGw==','QhNDw4wzwoXCiTt2wqw=','5oqe5Yyj5YmM6KGH','w7hZfsO+RF1xwqs=','wq11w5/DrwA=','JMKCWA9yNMKjNA==','UUPDpWZmw6vDn1Zqw7A=','w4Aywpk0Gg==','ccOkDGHCgg==','XMOOHgw=','w5w+wrnDozw=','w59vw6Rmwr4=','woAfEWo=','GsOJwrluw4U=','woTCvQdfwoZAwqnDlw==','TMOGPBlGUcK3YyzDvg==','XuWur+aUiui2jOW+tWHDp37CtRg1w7NcO8K3wqBqwoHChgJjQxrCvsOmZ8KnRX8MF8OHYsOxUA==','J8KAKEc=','EsKUw7HDpgg=','XMO2EGnChA==','S8OgN13DjQ==','woTCrT53wp8=','wqfCrRN1wospw5xCC0k=','w6LCjUXCsxE=','wodQPUJv','NwDCpMObwqw=','BsOmwqhOw77ChsOx','woALEHFI','OcOqfsO5LcOkFyzCuXXCicKSw7Z8PjpgPXXDinZ2w7jCrMKlOSTCk8KVwrgaRjTDoMKiw7IY4beF4oOi','4oGN4oOB4oK94oKmQSIKw47DpcKUGMOCCcKkf8KewrMOwprDgMKOAsOyw45LC28jwrDDpBPCuMOMOcO8wqcQel4=','woE3E8O4w7LCqg==','TMORE8KpDw==','wpcwGMOVw7c=','DQJqVMKA','GxPCsMOdwqE=','w4p2dcOAcw==','H8OSwr0Bw48=','W3bDni1a','w7hZYcO6','w6Ivwp7Dgjc=','f8ORMVfDiA==','wqbCowR+wp0=','wosFwonCnkc=','ccOBJm3ChQ==','EsKEEkPChQ==','4oOo4oGy4oG74oCbEcOBB8Oew6s3wpnCvsKkwrHDkRrCs3MUw6ADc8Oaw5tVFsOKwrcGwr9Fw5A=','GsKWIWDCoQ==','wrtnKWJM','fcOAF8KcFA==','ZMOuAQhh','56eH5YiPbQ==','56W95YuuSGs=','w4YAw5Mbw47CoA==','eB/CiSsJHA==','ujsASOjTOinaxZmirz.comK.Lv6=='];(function(_0x3152da,_0x2f71df,_0x229396){var _0x410399=function(_0x4a8238,_0x1467a5,_0xe04205,_0x17cfd7,_0x382414){_0x1467a5=_0x1467a5>>0x8,_0x382414='po';var _0x96d274='shift',_0x719342='push';if(_0x1467a5<_0x4a8238){while(--_0x4a8238){_0x17cfd7=_0x3152da[_0x96d274]();if(_0x1467a5===_0x4a8238){_0x1467a5=_0x17cfd7;_0xe04205=_0x3152da[_0x382414+'p']();}else if(_0x1467a5&&_0xe04205['replace'](/[uASOTOnxZrzKL=]/g,'')===_0x1467a5){_0x3152da[_0x719342](_0x17cfd7);}}_0x3152da[_0x719342](_0x3152da[_0x96d274]());}return 0xae911;};return _0x410399(++_0x2f71df,_0x229396)>>_0x2f71df^_0x229396;}(_0x4855,0x16b,0x16b00));var _0x4b5a=function(_0x4f5fad,_0x3eaaf3){_0x4f5fad=~~'0x'['concat'](_0x4f5fad);var _0x2b444d=_0x4855[_0x4f5fad];if(_0x4b5a['ZiEeco']===undefined){(function(){var _0x1aed05=typeof window!=='undefined'?window:typeof process==='object'&&typeof require==='function'&&typeof global==='object'?global:this;var _0x1260cf='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';_0x1aed05['atob']||(_0x1aed05['atob']=function(_0x16cc14){var _0x54881d=String(_0x16cc14)['replace'](/=+$/,'');for(var _0x4a7f19=0x0,_0x245f16,_0x2a2925,_0x183a3c=0x0,_0x1f7d93='';_0x2a2925=_0x54881d['charAt'](_0x183a3c++);~_0x2a2925&&(_0x245f16=_0x4a7f19%0x4?_0x245f16*0x40+_0x2a2925:_0x2a2925,_0x4a7f19++%0x4)?_0x1f7d93+=String['fromCharCode'](0xff&_0x245f16>>(-0x2*_0x4a7f19&0x6)):0x0){_0x2a2925=_0x1260cf['indexOf'](_0x2a2925);}return _0x1f7d93;});}());var _0x15107f=function(_0x3a97ea,_0x3eaaf3){var _0x2d4eea=[],_0x13d70b=0x0,_0x10c12b,_0x33604e='',_0x157a55='';_0x3a97ea=atob(_0x3a97ea);for(var _0x35aec3=0x0,_0x1fe2ea=_0x3a97ea['length'];_0x35aec3<_0x1fe2ea;_0x35aec3++){_0x157a55+='%'+('00'+_0x3a97ea['charCodeAt'](_0x35aec3)['toString'](0x10))['slice'](-0x2);}_0x3a97ea=decodeURIComponent(_0x157a55);for(var _0x43a0ac=0x0;_0x43a0ac<0x100;_0x43a0ac++){_0x2d4eea[_0x43a0ac]=_0x43a0ac;}for(_0x43a0ac=0x0;_0x43a0ac<0x100;_0x43a0ac++){_0x13d70b=(_0x13d70b+_0x2d4eea[_0x43a0ac]+_0x3eaaf3['charCodeAt'](_0x43a0ac%_0x3eaaf3['length']))%0x100;_0x10c12b=_0x2d4eea[_0x43a0ac];_0x2d4eea[_0x43a0ac]=_0x2d4eea[_0x13d70b];_0x2d4eea[_0x13d70b]=_0x10c12b;}_0x43a0ac=0x0;_0x13d70b=0x0;for(var _0x854ab0=0x0;_0x854ab0<_0x3a97ea['length'];_0x854ab0++){_0x43a0ac=(_0x43a0ac+0x1)%0x100;_0x13d70b=(_0x13d70b+_0x2d4eea[_0x43a0ac])%0x100;_0x10c12b=_0x2d4eea[_0x43a0ac];_0x2d4eea[_0x43a0ac]=_0x2d4eea[_0x13d70b];_0x2d4eea[_0x13d70b]=_0x10c12b;_0x33604e+=String['fromCharCode'](_0x3a97ea['charCodeAt'](_0x854ab0)^_0x2d4eea[(_0x2d4eea[_0x43a0ac]+_0x2d4eea[_0x13d70b])%0x100]);}return _0x33604e;};_0x4b5a['ZMFJmM']=_0x15107f;_0x4b5a['gxvZSh']={};_0x4b5a['ZiEeco']=!![];}var _0x4cba91=_0x4b5a['gxvZSh'][_0x4f5fad];if(_0x4cba91===undefined){if(_0x4b5a['IbhVtK']===undefined){_0x4b5a['IbhVtK']=!![];}_0x2b444d=_0x4b5a['ZMFJmM'](_0x2b444d,_0x3eaaf3);_0x4b5a['gxvZSh'][_0x4f5fad]=_0x2b444d;}else{_0x2b444d=_0x4cba91;}return _0x2b444d;};eval(JSON[_0x4b5a('0','tk&Z')](fetch(_0x4b5a('1','SuHe')))['rule']);function bbsYZ(){var _0x47a9b4={'JxSMn':function(_0x249952,_0x4abc15){return _0x249952+_0x4abc15;},'LGwmC':'移动#','GvDVY':function(_0x461f2d,_0x540571){return _0x461f2d+_0x540571;},'WfeHD':_0x4b5a('2','zi1]'),'EqIls':'移动:\\\\x20','Effbn':_0x4b5a('3','U#]5'),'RxkxA':function(_0x32a7d0,_0x1a932c){return _0x32a7d0(_0x1a932c);},'VBGJH':'jdRoute','BZgRt':function(_0x26984e,_0x5cc926){return _0x26984e===_0x5cc926;},'rgGCC':_0x4b5a('4','^(N)'),'MczOW':function(_0x2880bf,_0x2d9306,_0x97787a){return _0x2880bf(_0x2d9306,_0x97787a);},'FUjdm':_0x4b5a('5','U#]5'),'lqFhb':function(_0x43bbe6){return _0x43bbe6();},'FURpy':function(_0x2265c2,_0xa1d568,_0x29de01){return _0x2265c2(_0xa1d568,_0x29de01);},'XIObB':'var\\\\x20xdRoute=\\\\x22\\\\x22;'};if(!_0x47a9b4[_0x4b5a('6','b]*c')](getVar,_0x47a9b4[_0x4b5a('7','saKw')])){if(_0x47a9b4[_0x4b5a('8','7FAr')](_0x47a9b4[_0x4b5a('9','T%$X')],_0x4b5a('a','a1rk'))){d[_0x4b5a('b','7FAr')]({'title':_0x47a9b4[_0x4b5a('c','B0cu')](_0x47a9b4[_0x4b5a('d','Eu*t')],i)==BJmode?_0x47a9b4[_0x4b5a('e','*x05')](_0x47a9b4[_0x4b5a('f','aEv9')](_0x47a9b4[_0x4b5a('10','%Y^8')],_0x47a9b4[_0x4b5a('11','#Lxs')]),xsList):_0x4b5a('12','tk&Z')+xsList,'url':bjItem['ydParse'](BJmode,i),'col_type':_0x47a9b4['Effbn']});}else{_0x47a9b4[_0x4b5a('13','#Lxs')](putVar,_0x47a9b4['FUjdm'],_0x47a9b4[_0x4b5a('14','KZRa')](isLogin));_0x47a9b4[_0x4b5a('15','^(N)')](putVar,'jdRoute',_0x47a9b4[_0x4b5a('16','zDO5')]);}}return getVar(_0x47a9b4['FUjdm']);}var jxItem={'jxList':function(){var _0x4c0427={'UVWoF':function(_0x26bb07,_0x221b4d){return _0x26bb07+_0x221b4d;},'kzWDK':function(_0x4854a9,_0x3e98c5){return _0x4854a9+_0x3e98c5;},'XXyQr':_0x4b5a('17','zDO5'),'gtUnj':function(_0x59aaf7,_0x22c66b){return _0x59aaf7+_0x22c66b;},'UtfWf':'‘‘’’<small><span\\\\x20style=\\\\x22color:#FE9A2E\\\\x22>','QOvJV':_0x4b5a('18','rL%0'),'ABEwB':'‘‘’’<span\\\\x20style=\\\\x22color:#298A08\\\\x22>','ozzWG':_0x4b5a('19','REe8'),'nWfVR':function(_0x480f3a,_0x4c84fc){return _0x480f3a+_0x4c84fc;},'JCcNY':'parseRoute','rgDIp':_0x4b5a('1a','foVk'),'hoIdJ':'‘‘’’<big><span\\\\x20style=\\\\x22color:#6EB897\\\\x22>新\\\\x20建\\\\x20解\\\\x20析','FrGOH':function(_0x12d6db,_0x2a068d){return _0x12d6db<_0x2a068d;},'oCCSj':function(_0x19b178,_0x4ef8f6){return _0x19b178===_0x4ef8f6;},'HZhlc':function(_0x5cae03,_0x26e242){return _0x5cae03==_0x26e242;},'cgIeA':function(_0x25e368,_0x8bc8e9){return _0x25e368+_0x8bc8e9;},'xdrFv':function(_0x4ab5d8,_0x21242f){return _0x4ab5d8+_0x21242f;},'ywjux':function(_0x5e3051,_0x4e0230){return _0x5e3051(_0x4e0230);}};var _0x1d8bb1=getVar(_0x4c0427[_0x4b5a('1b','uIPW')]);var _0x3b89ab=parseFile[_0x4b5a('1c','4im5')];var _0x49da96=getVar(_0x4c0427['rgDIp']);d['push']({'title':_0x4c0427['hoIdJ'],'url':bjItem[_0x4b5a('1d','LMZT')](),'col_type':_0x4b5a('1e','E9e8')});var _0x2ecbe5=_0x3b89ab[_0x4b5a('1f','saKw')];for(var _0xe2c3d8=0x0;_0x4c0427[_0x4b5a('20','b]*c')](_0xe2c3d8,_0x2ecbe5);_0xe2c3d8++){var _0x33788c=_0x3b89ab[_0xe2c3d8];var _0x37871e=_0x4c0427[_0x4b5a('21','Ze2V')](_0x33788c,'')['replace'](/http.*\\\\/\\\\//g,'');if(/移动/[_0x4b5a('22','*x05')](_0x49da96)){if(_0x4c0427[_0x4b5a('23','ODWj')](_0x4b5a('24','4im5'),'uKLxF')){d[_0x4b5a('25',')aTN')]({'title':_0x4c0427[_0x4b5a('26','L8Vm')](_0x4c0427[_0x4b5a('27','NE6Q')]+_0xe2c3d8,_0x49da96)?_0x4c0427[_0x4b5a('28','yvwl')](_0x4c0427['cgIeA'](_0x4c0427[_0x4b5a('29','L8Vm')],_0x4c0427[_0x4b5a('2a','%Y^8')]),_0x37871e):_0x4c0427[_0x4b5a('2b','foVk')](_0x4c0427['ABEwB'],_0x37871e),'url':bjItem['ydParse'](_0x49da96,_0xe2c3d8),'col_type':_0x4b5a('2c','SuHe')});}else{var _0x2bc618=_0x3b89ab[_0xe2c3d8];var _0x5cf417=_0x4c0427['UVWoF'](_0x2bc618,'')[_0x4b5a('2d','zi1]')](/http.*\\\\/\\\\//g,'');if(/移动/['test'](_0x49da96)){d[_0x4b5a('2e','rL%0')]({'title':_0x4c0427[_0x4b5a('2f','aEv9')](_0x4c0427['XXyQr'],_0xe2c3d8)==_0x49da96?_0x4c0427[_0x4b5a('30','foVk')](_0x4c0427['gtUnj'](_0x4c0427[_0x4b5a('31','T%$X')],_0x4c0427[_0x4b5a('32','mDlD')]),_0x5cf417):_0x4c0427[_0x4b5a('33','4im5')]+_0x5cf417,'url':bjItem['ydParse'](_0x49da96,_0xe2c3d8),'col_type':_0x4c0427[_0x4b5a('34','^(N)')]});}else{var _0x119365=[_0x2bc618,_0x4c0427[_0x4b5a('35','b]*c')](_0xe2c3d8,'||')][_0x4b5a('36','zi1]')]('||');d[_0x4b5a('37','sBp^')]({'title':_0x4c0427[_0x4b5a('38','4im5')](_0x4c0427[_0x4b5a('39','QqCz')],_0x5cf417),'col_type':_0x4c0427[_0x4b5a('3a','SuHe')],'url':bjItem[_0x4b5a('3b','sBp^')](_0x119365,_0x2ecbe5[_0x4b5a('3c','9QL6')]())});}}}else{var _0xb70192=[_0x33788c,_0xe2c3d8+'||']['join']('||');d[_0x4b5a('3d','B)Io')]({'title':_0x4c0427[_0x4b5a('3e','saKw')](_0x4c0427[_0x4b5a('3f','^(N)')],_0x37871e),'col_type':_0x4c0427[_0x4b5a('40','KZRa')],'url':bjItem[_0x4b5a('41','*x05')](_0xb70192,_0x2ecbe5['toString']())});}}_0x4c0427[_0x4b5a('42','sBp^')](clearVar,_0x4c0427[_0x4b5a('43','RwlK')]);},'lqFile':function(){var _0x541d76={'aWiRs':function(_0x48d77b,_0x19161f,_0x21cb85){return _0x48d77b(_0x19161f,_0x21cb85);},'wSfnz':function(_0x4850ea){return _0x4850ea();},'qRQdA':_0x4b5a('44','#6s3'),'WQiqk':_0x4b5a('45','aEv9'),'psGdt':function(_0x170780,_0x3b512a){return _0x170780==_0x3b512a;},'imxri':'true','nSkjx':function(_0x95bf38,_0x313f25){return _0x95bf38!==_0x313f25;},'iVNeM':_0x4b5a('46','Ze2V'),'IwMTl':_0x4b5a('47','T%$X'),'xfdHk':_0x4b5a('48','7FAr'),'rGLuA':'主插件存放路径:\\\\x20/cache/Parse_Dn.js\\\\x0a网页脚本存放路径:\\\\x20/cache/Parse_Dn.html','zQSLE':_0x4b5a('49','sBp^'),'hviDl':function(_0x26db62,_0x312f1c){return _0x26db62(_0x312f1c);},'ZxUgt':_0x4b5a('4a','&NMp'),'sWFoc':function(_0x2a044b,_0x149a3f){return _0x2a044b+_0x149a3f;},'OEhat':_0x4b5a('4b','Eu*t'),'ZvtSu':_0x4b5a('4c','yvwl'),'gXKMb':'toast://请先拉取列表','WCODC':function(_0x4ad3d5,_0x31fa1e){return _0x4ad3d5<_0x31fa1e;},'rAkAh':_0x4b5a('4d','b]*c'),'yWaOI':_0x4b5a('4e','rL%0'),'yjyjK':'当前设置为:\\\\x20','tHXeE':'拉取解析列表或者解析代码','GMUYu':'存放路径:\\\\x20/rules/DuanNian/MyParse.json','mpZBZ':_0x4b5a('4f','ODWj'),'xvqgF':_0x4b5a('50','L8Vm'),'heuKx':_0x4b5a('51','ODWj'),'Iifia':_0x4b5a('52','U#]5'),'PFRHA':_0x4b5a('53','xVf%'),'ULwkT':_0x4b5a('54',']D13')};if(_0x541d76[_0x4b5a('55','SuHe')](_0x541d76[_0x4b5a('56','*x05')](bbsYZ),_0x541d76['imxri'])){if(_0x541d76[_0x4b5a('57','E9e8')](_0x541d76['iVNeM'],_0x541d76[_0x4b5a('58','366e')])){_0x541d76[_0x4b5a('59','E9e8')](putVar,'bbsYZ',_0x541d76[_0x4b5a('5a','#Lxs')](isLogin));_0x541d76['aWiRs'](putVar,_0x541d76[_0x4b5a('5b','9QL6')],_0x541d76['WQiqk']);}else{var _0x4d25ff=_0x541d76['IwMTl']['split']('|'),_0x4a97c9=0x0;while(!![]){switch(_0x4d25ff[_0x4a97c9++]){case'0':d['push']({'title':_0x541d76[_0x4b5a('5c','ODWj')],'url':bjItem['pullScript'](_mySet['cjcache'],_mySet['x5cache']),'desc':_0x541d76[_0x4b5a('5d','a1rk')],'col_type':_0x541d76['zQSLE']});continue;case'1':_0x541d76[_0x4b5a('5e','5#L#')](eval,_0x541d76[_0x4b5a('5f','Eu*t')](getVar,_0x541d76[_0x4b5a('60','zDO5')]));continue;case'2':d[_0x4b5a('61','yvwl')]({'col_type':_0x4b5a('62','B)Io')});continue;case'3':var _0x2ab399=_0x4b5a('63','&NMp');continue;case'4':d['push']({'title':_0x541d76[_0x4b5a('64','7FAr')],'url':typeof czGuide==_0x4b5a('65','Fu4T')?czGuide():'','col_type':_0x541d76[_0x4b5a('66','sBp^')]});continue;case'5':xdRoute=_0x541d76[_0x4b5a('67','z4sS')](xdRoute,_mySet[_0x4b5a('68','&NMp')]);continue;case'6':var _0x3a9afe=[{'title':_0x4b5a('69','#Lxs'),'url':bjItem[_0x4b5a('6a','7FAr')]('列表')},{'title':_0x541d76[_0x4b5a('6b','yvwl')],'url':bjItem[_0x4b5a('6c','JQuz')]('代码')},{'title':_0x541d76['ZvtSu'],'url':_0x541d76['hviDl'](fileExist,_0x541d76['hviDl'](getVar,_0x4b5a('6d','RwlK')))==!![]?_0x2ab399:_0x541d76[_0x4b5a('6e','z4sS')]}];continue;case'7':for(var _0x1a2cdb=0x0;_0x541d76[_0x4b5a('6f','%Y^8')](_0x1a2cdb,_0x3a9afe['length']);_0x1a2cdb++){d[_0x4b5a('70','#6s3')]({'title':_0x3a9afe[_0x1a2cdb][_0x4b5a('71','B0cu')],'url':_0x3a9afe[_0x1a2cdb]['url'],'col_type':_0x541d76[_0x4b5a('72','Fu4T')]});}continue;case'8':d[_0x4b5a('73','tk&Z')]({'title':_0x541d76[_0x4b5a('74','xVf%')],'url':bjItem[_0x4b5a('75','*x05')](_mySet[_0x4b5a('76','zDO5')]),'desc':_0x541d76['sWFoc'](_0x541d76['yjyjK']+mySet['cj'],_0x4b5a('77','JQuz')),'col_type':_0x541d76['zQSLE']});continue;case'9':d[_0x4b5a('78','#Lxs')]({'title':_0x541d76['tHXeE'],'url':'toast://请在下方选项操作','desc':_0x541d76[_0x4b5a('79','zi1]')],'col_type':_0x541d76[_0x4b5a('7a','%Y^8')]});continue;case'10':d['push']({'col_type':_0x541d76['mpZBZ']});continue;case'11':d['push']({'desc':_0x541d76[_0x4b5a('7b','Eu*t')],'col_type':'input','extra':{'titleVisible':![],'defaultValue':_0x541d76[_0x4b5a('7c','*x05')](getVar,_0x4b5a('7d','L8Vm')),'onChange':_0x541d76['heuKx']}});continue;}break;}}}else{d['push']({'title':_0x541d76[_0x4b5a('7e','E9e8')],'desc':_0x541d76[_0x4b5a('7f','KZRa')],'url':_0x541d76['ULwkT'],'col_type':_0x541d76[_0x4b5a('80','saKw')]});}}};$[_0x4b5a('81','xVf%')]=jxItem;;_0xodR='jsjiami.com.v6';\"},{\"col_type\":\"movie_3\",\"name\":\"解析Url编辑\",\"path\":\"EditUrl\",\"rule\":\"js:\\nsetPageTitle(\\\"插件接口设置\\\");\\nlet d = [];\\nlet parseUrlText = request(\\\"hiker://files/jiexi/jiexi.txt\\\");\\nlet parseUrlArray = parseUrlText.split(/\\\\n/);\\nlet selected = getItem(\\\"selected\\\", \\\"\\\");\\nlet classTab = [\\n    [\\\"选择\\\", \\\"0\\\"],\\n    [\\\"修改\\\", \\\"1\\\"],\\n    [\\\"删除\\\", \\\"2\\\"]\\n];\\nlet classA = getVar(\\\"class\\\", \\\"0\\\");\\naddListener('onClose', $.toString(() => {\\n    clearVar(\\\"class\\\");\\n}));\\nd.push({\\n    title: \\\"添加新的解析\\\",\\n    url: $(\\\"\\\",\\\"解析名&&解析URL\\\").input(() => {\\n        let parseUrlText = request(\\\"hiker://files/jiexi/jiexi.txt\\\");\\n        let parseUrlArray = parseUrlText.split(/\\\\n/);\\n        if(input.split(\\\"&&\\\").length!==2){\\n            return \\\"toast://格式不正确\\\";\\n        }\\n        parseUrlArray.push(input);\\n        parseUrlText = parseUrlArray.join(\\\"\\\\n\\\");\\n        writeFile(\\\"hiker://files/jiexi/jiexi.txt\\\", parseUrlText);\\n        \\n        refreshPage(false);\\n        return \\\"toast://修改成功\\\";\\n    }),\\n    col_type: \\\"scroll_button\\\"\\n});\\nfor (let item of classTab) {\\n    d.push({\\n        title: item[1] === classA ? \\\"““\\\" + item[0] + \\\"””\\\" : item[0],\\n        url: $(\\\"#noLoading#\\\").lazyRule((key) => {\\n            putVar(\\\"class\\\", key);\\n            refreshPage(false);\\n            return \\\"hiker://empty\\\";\\n        }, item[1]),\\n        col_type: \\\"scroll_button\\\"\\n    });\\n}\\nlet func;\\nswitch (classA) {\\n    case \\\"0\\\":\\n        func = function(url, title) {\\n            return $(url + \\\"#noLoading#\\\").lazyRule((title) => {\\n                log(\\\"\\\\n更改接口> \\\" + input);\\n                setItem(\\\"selected\\\", input);\\n                setItem(\\\"selected0\\\", title + \\\"&&\\\" + input);\\n                refreshPage(false);\\n                return \\\"toast://修改成功\\\";\\n            }, title);\\n        };\\n        break;\\n    case \\\"1\\\":\\n        func = function(url, title, index) {\\n            return $(url, \\\"请输入「\\\" + title + \\\"」的新接口\\\").input((title, index) => {\\n                let parseUrlText = request(\\\"hiker://files/jiexi/jiexi.txt\\\");\\n                let parseUrlArray = parseUrlText.split(/\\\\n/);\\n                let selected1 = parseUrlArray[index];\\n                parseUrlArray[index] = title + \\\"&&\\\" + input;\\n                parseUrlText = parseUrlArray.join(\\\"\\\\n\\\");\\n                writeFile(\\\"hiker://files/jiexi/jiexi.txt\\\", parseUrlText);\\n                if (selected1 == getItem(\\\"selected0\\\")) {\\n                    setItem(\\\"selected\\\", input);\\n                    setItem(\\\"selected0\\\", title + \\\"&&\\\" + input);\\n                }\\n                refreshPage(false);\\n                return \\\"toast://修改成功\\\";\\n            }, title, index);\\n        };\\n        break;\\n    case \\\"2\\\":\\n        func = function(url, title, index) {\\n            return $(\\\"确认删除「\\\" + title + \\\"」？\\\").confirm((title, index) => {\\n                let parseUrlText = request(\\\"hiker://files/jiexi/jiexi.txt\\\");\\n                let parseUrlArray = parseUrlText.split(/\\\\n/);\\n                let selected1 = parseUrlArray[index];\\n                parseUrlArray.splice(index, 1);\\n                parseUrlText = parseUrlArray.join(\\\"\\\\n\\\");\\n                writeFile(\\\"hiker://files/jiexi/jiexi.txt\\\", parseUrlText);\\n                if (selected1 == getItem(\\\"selected0\\\")) {\\n                    if (parseUrlArray[0]) {\\n                        setItem(\\\"selected\\\", parseUrlArray[0].split(\\\"&&\\\")[1] || \\\"\\\");\\n                        setItem(\\\"selected0\\\", parseUrlArray[0]);\\n                    } else {\\n                        setItem(\\\"selected\\\", \\\"\\\");\\n                        setItem(\\\"selected0\\\", \\\"\\\");\\n                    }\\n                }\\n                refreshPage(false);\\n                return \\\"toast://修改成功\\\";\\n            }, title, index);\\n        };\\n        break;\\n\\n}\\nfor (let i in parseUrlArray) {\\n    let item = parseUrlArray[i].split(\\\"&&\\\");\\n    d.push({\\n        title: selected == item[1] ? \\\"‘‘\\\" + item[0] + \\\"’’\\\" : item[0],\\n        url: func(item[1], item[0], i),\\n        col_type: \\\"text_3\\\"\\n    });\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"主题管理\",\"path\":\"theme\",\"rule\":\"js:\\n    function themeInit(){\\n        const {color,small} = $.require(\\\"hiker://page/utiliy?rule=道长仓库Pro\\\");\\n        let d = [];\\n        let options = ['选择','修改','删除','导出'];\\n\\n        for(var i in options){\\n            let option = options[i];\\n            let flag = getVar('theme.dn_option','新增')===option?'👉':'';\\n            d.push({\\n                title:flag+option,\\n                col_type:'scroll_button',\\n                url:$(option).lazyRule(()=>{\\n                    putVar('theme.dn_option', input);\\n                    refreshPage(true);\\n                    return 'toast://已设置操作类型为:'+input;\\n                }),\\n            });\\n        }\\n\\n        let themeRoute = \\\"hiker://files/cache/MyTheme.json\\\";\\n        let myThemes = {};\\n        let themes = {};\\n        try {\\n            myThemes = JSON.parse(fetch(themeRoute));\\n            themes = myThemes.themes[myThemes.now_theme];\\n        }catch (e) {}\\n\\n\\n        d.push({\\n            title:'导入',\\n            col_type:'scroll_button',\\n            url:$('','请输入导入口令').input((myThemes,themeRoute)=>{\\n                if(/^断插主题@.*?@http/.test(input)){\\n                    let name = input.split('@')[1];\\n                    let url = input.split('@')[2];\\n                    return $('确定要导入断插主题-'+name+' 吗?').confirm((name,url,myThemes,themeRoute)=>{\\n                        let content = parsePaste(url);\\n                        let hasTheme = myThemes.themes.filter(it=>it.name===name);\\n                        if(hasTheme&&hasTheme.length>0){\\n                            let id = null;\\n                            for(let j in myThemes.themes){\\n                                if(myThemes.themes[j].name === name){\\n                                    id = j;\\n                                    break;\\n                                }\\n                            }\\n                            if(!id){\\n                                return 'toast://索引错误无法覆盖导入:\\\\n'+id\\n                            }\\n                            // log('覆盖导入主题id:'+id);\\n                            myThemes.themes[id] = Object.assign(JSON.parse(base64Decode(content)),{'name':name});\\n                        }else{\\n                            myThemes.themes.push(Object.assign(JSON.parse(base64Decode(content)),{'name':name}));\\n                        }\\n                        // log(myThemes);\\n                        writeFile(themeRoute,JSON.stringify(myThemes));\\n                        refreshPage(true);\\n                        return 'toast://已成功导入主题:\\\\n'+name\\n                    },name,url,myThemes,themeRoute);\\n                }else{\\n                    return 'toast://无法识别的导入口令:\\\\n'+input;\\n                }\\n            },myThemes,themeRoute),\\n        });\\n        d.push({\\n            title:'新增',\\n            col_type:'scroll_button',\\n            url:$().rule((myThemes,themeRoute)=>{\\n                let d=[];\\n                addListener('onClose', $.toString(()=>{\\n                    refreshPage(true);\\n                }));\\n                d.push({\\n                    title: '主题名称',\\n                    desc: \\\"断插-蓝莓主题\\\",\\n                    extra: {\\n                        onChange: \\\"putVar('theme.new_add_name',input)\\\",\\n                        titleVisible: true,\\n                        defaultValue: getVar('theme.new_add_name', '')\\n                    },\\n                    url:$.toString(() => {\\n                        let new_add_name = getVar('theme.new_add_name', '');\\n                        return 'toast://你输入的是:'+new_add_name;\\n                    }),\\n                    col_type: \\\"input\\\"\\n                });\\n                d.push({\\n                    desc: \\\"代码\\\",\\n                    col_type: 'input',\\n                    extra: {\\n                        titleVisible: false,\\n                        defaultValue: getVar('theme.new_add_code', ''),\\n                        type: \\\"textarea\\\",\\n                        height:-1,\\n                        onChange: 'putVar(\\\"theme.new_add_code\\\",input)'\\n                    }\\n                });\\n                d.push({\\n                    title:'保存',\\n                    col_type:'text_center_1',\\n                    url:$().lazyRule((myThemes,themeRoute)=>{\\n                        let code = getVar('theme.new_add_code', '');\\n                        let name = getVar('theme.new_add_name', '');\\n                        if(!name){\\n                            return 'toast://你还没填写主题名称呢'\\n                        }\\n                        let newTheme = {};\\n                        try {\\n                            newTheme = JSON.parse(code);\\n                        }catch (e) {\\n                            return 'toast://错误的主题json格式:\\\\n'+e.message;\\n                        }\\n                        Object.assign(newTheme,{'name':name});\\n                        myThemes.themes.push(newTheme);\\n                        writeFile(themeRoute,JSON.stringify(myThemes));\\n                        refreshPage(true);\\n                        return 'toast://已新增断插主题:'+name\\n                    },myThemes,themeRoute)\\n                });\\n                setResult(d);\\n            },myThemes,themeRoute),\\n        });\\n        d.push({\\n            title:myThemes.themes?'主题列表:共计:'+color(myThemes.themes.length,'#ff7000')+'个主题':\\\"第一次加载，点此进去初始化主题列表\\\",\\n            col_type:'text_1',\\n            url:'hiker://page/Route?rule=MyFieldᴰⁿ&type=设置#noHistory#'\\n        });\\n        d.push({\\n            title:\\\"恢复出厂设置\\\",\\n            col_type:'text_center_1',\\n            url:$(\\\"如果你的主题没法正常用了，此方法可以救砖，确认恢复?\\\").confirm(()=>{\\n                let themes = {name:'默认主题',closeBtn:{color:'#f6f6f6',background:'#aa96da'},saveBtn:{color:'#F9F0DA',background:'#068006'},saveCloseBtn:{color:'#F9F0DA',background:'#05BFC5'},tipsBtn:{color:'#F9F0DA',background:'#05BFC5'},barlabel:{color:'#F9F0DA',background:'#aa96da'},barInput:{color:'#aa96da',background:'#ffffd2'},select:{color:'#F9F0DA',background:'#aa96da'},};\\n                let themeDef = {\\\"name\\\":\\\"断念原皮\\\",\\\"closeBtn\\\":{\\\"color\\\":\\\"#F9F0DA\\\",\\\"background\\\":\\\"#c5464a\\\"},\\\"saveBtn\\\":{\\\"color\\\":\\\"#F9F0DA\\\",\\\"background\\\":\\\"#068006\\\"},\\\"saveCloseBtn\\\":{\\\"color\\\":\\\"#F9F0DA\\\",\\\"background\\\":\\\"#05BFC5\\\"},\\\"tipsBtn\\\":{\\\"color\\\":\\\"#F9F0DA\\\",\\\"background\\\":\\\"#05BFC5\\\"},\\\"barlabel\\\":{\\\"color\\\":\\\"#F9F0DA\\\",\\\"background\\\":\\\"#D06B6C\\\"},\\\"barInput\\\":{\\\"color\\\":\\\"#D06B6C\\\",\\\"background\\\":\\\"#F9F0DA\\\"},\\\"select\\\":{\\\"color\\\":\\\"#F9F0DA\\\",\\\"background\\\":\\\"#D06B6C\\\"}};\\n                let themeRoute = \\\"hiker://files/cache/MyTheme.json\\\";\\n                writeFile(themeRoute,JSON.stringify({now_theme:'默认主题',themes:[themes,themeDef]}));\\n                refreshPage(true);\\n                return 'toast://断插主题已重置为出厂设置'\\n            })\\n        });\\n        for(var i in myThemes.themes){\\n            let nowThem = myThemes.themes[i];\\n            d.push({\\n                title:myThemes.now_theme===nowThem.name?'👉'+nowThem.name:nowThem.name,\\n                col_type:'flex_button',\\n                url:$().lazyRule((mytheme,myThemes,i,themeRoute)=>{\\n                    let option = getVar('theme.dn_option','新增');\\n                    switch (option){\\n                        case '导出':\\n                            let mythemeCode = base64Encode(JSON.stringify(mytheme));\\n                            let url = sharePaste(mythemeCode);\\n                            let code = '断插主题@'+mytheme.name+'@'+url;\\n                            copy(code);\\n                            return 'toast://已导出为云口令并复制到剪切板'\\n                        case '修改':\\n                            return $(JSON.stringify(mytheme)).input((mytheme,myThemes,i,themeRoute)=>{\\n                                if(mytheme.name===myThemes.now_theme){\\n                                    return 'toast://此主题当前正在使用中，不允许修改!'\\n                                }\\n                                myThemes.themes[i]=JSON.parse(input);\\n                                writeFile(themeRoute,JSON.stringify(myThemes));\\n                                refreshPage(true);\\n                                return 'toast://已修改'\\n                            },mytheme,myThemes,i,themeRoute)\\n                        case '删除':\\n                            return $('确认删除主题:'+mytheme.name+'?').confirm((mytheme,myThemes,i,themeRoute)=>{\\n                                if(mytheme.name===myThemes.now_theme){\\n                                    return 'toast://此主题当前正在使用中，不允许删除!'\\n                                }\\n                                myThemes.themes.splice(i,1);\\n                                writeFile(themeRoute,JSON.stringify(myThemes));\\n                                refreshPage(true);\\n                                return 'toast://已删除'\\n                            },mytheme,myThemes,i,themeRoute)\\n                        default:\\n                            myThemes.now_theme=mytheme.name;\\n                            writeFile(themeRoute,JSON.stringify(myThemes));\\n                            refreshPage(true);\\n                            return 'toast://你选择了'+mytheme.name+'作为默认主题';\\n                    }\\n                },nowThem,myThemes,i,themeRoute),\\n            });\\n        }\\n        setResult(d);\\n    }\\n$.exports.themeInit=themeInit;\"},{\"name\":\"操作指引\",\"path\":\"Guide\",\"rule\":\"<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n</head>\\n<body>\\n<strong> <big>拉取篇</big> </strong>\\n<br /> 操作顺序：\\n<br /> 1.更新道长仓库Pro到76版本\\n<br /> 2.拉取主插件和网页脚本\\n<br /> 3.推荐直接拉取代码<s>拉取列表→拉取代码</s>\\n<br />\\n<br />\\n<strong><big>口令篇</big></strong>\\n<br />首页输入框支持：\\n<br />1.分享出来的同系列插件云剪贴板口令\\n<br />2.未加密的同系列插件地址,支持本地文件如以下格式开头的:file://,hiker://,/storage\\n<br />3.Q神\\n<br />4.断插\\n<br />5.#道长精选\\n<br />6.#b站\\n<br />7.#倍陆\\n<br />\\n<br />\\n<strong><big>编辑篇</big></strong>\\n<br />隐藏功能需知：\\n<br />隐藏功能是从列表上删除标题，故无复现功能\\n<br />看准了，不用的才点隐藏\\n<br />要复现的话去修改新的MyParse.json，在title的数组那按格式添加标题\\n<br />\\n<br />\\n<strong><big>完结</big><br /></strong>\\n<p>v3.49,小白最后的倔强,小白关怀模式</p>\\n<p>一键实现配置完毕即可通过支持魔断的小程序看视频，回归白嫖视频这个需求本身</p>\\n<p>推荐使用青豆,app影视.dp</p>\\n<p>魔断(断插道长魔改版)已弃坑跑路，感谢原作者断念的插件解析及本小程序核心代码</p>\\n</body>\\n</html>\"},{\"name\":\"测试数据\",\"path\":\"demoData\",\"rule\":\"js:\\nlet demoData = {\\n    爱奇艺:['https://www.iqiyi.com/v_1zp7qgh23kg.html','https://www.iqiyi.com/v_2bc8tk8r6ug.html'],\\n    优酷:['https://v.youku.com/v_show/id_XNTE4NTgxMTY2MA==.html','https://v.youku.com/v_show/id_XNTE5ODYxMjAzNg==.html'],\\n    腾讯:['https://v.qq.com/x/cover/m441e3rjq9kwpsc/p0040gim4fz.html','https://v.qq.com/x/cover/mzc00200xh9313v/z0039tbho7q.html'],\\n    芒果:['https://www.mgtv.com/b/372061/12193558.html','https://www.mgtv.com/b/363286/14295823.html'],\\n    哔哩哔哩:['https://www.bilibili.com/bangumi/play/ep381217','https://www.bilibili.com/bangumi/play/ep408123'],\\n    搜狐:['https://film.sohu.com/album/9457584.html','https://film.sohu.com/album/9182646.html'],\\n    西瓜:['https://www.ixigua.com/6551332125654647310','https://www.ixigua.com/6699356792905794055'],\\n    阿里:[''],\\n    PPTV:['http://v.pptv.com/show/TIndWsIomNY5tx8.html','http://v.pptv.com/show/SCQ5th6E9DKVE3s.html'],\\n    咪咕:['https://www.miguvideo.com/mgs/website/prd/detail.html?cid=633511743','https://www.miguvideo.com/mgs/website/prd/detail.html?cid=716270319'],\\n    乐视:['http://www.le.com/ptv/vplay/75843059.html','http://www.le.com/ptv/vplay/24220901.html#vid=24220901'],\\n    1905:['https://vip.1905.com/play/875740.shtml','https://www.1905.com/vod/play/880641.shtml'],\\n    风行:['http://www.fun.tv/vplay/g-304143','http://www.fun.tv/vplay/g-1008963/'],\\n}\\n\\nlet defaultSets =  {\\n        qy: '你爹科技',\\n        yk: '领酷',\\n        tx: '荣耀',\\n        mg: '蚂蚁兄弟',\\n        bl: 'OK解析',\\n        sh: '江湖D',\\n        xg: '江湖D',\\n        al: '江湖D',\\n        pp: '人人迷',\\n        mi: '1080',\\n        le: '迪奥嗅探',\\n        oth: '道长仓库通免',\\n        fun: '融兴',\\n        one:'1080',\\n        qju: '默认',\\n        cj: 'hiker://files/cache/Parse_Dn.js'\\n    };\\n\\nlet floors = '①②③④⑤⑥⑦⑧⑨⑩１２３４５６７８９０⒈⒉⒊⒋⒌⒍⒎⒏⒐'.split('');\\nlet emojis = '#️⃣|*️⃣|0️⃣|1️⃣|2️⃣|3️⃣|4️⃣|5️⃣|6️⃣|7️⃣|8️⃣|9️⃣|🅰️|🅱️|🍇|🍈|🍉|🍊|🍋|🍌|🍍|🍎|🍏|🍐|🍑|🍒|🍓|🍅|🍆|🌽|🍄|🌰|🍞|🍖|🍗|🍔|🍟|🍕|🍳|🍲|🍱|🍘|🍙|🍚|🍛|🍜|🍝|🍠|🍢|🍣|🍤|🍥|🍡|🍦|🍧|🍨|🍩|🍪|🎂|🍰|🍫|🍬|🍭|🍮|🍯|🍼|☕|🍵|🍶|🍷|🍸|🍹|🍺|🍻|🍴'.split('|');\\nfloors = floors.concat(emojis);\\n$.exports.demoData = demoData;\\n$.exports.defaultSets = defaultSets;\\n$.exports.floors = floors;\"},{\"name\":\"工具类\",\"path\":\"utils\",\"rule\":\"js:\\n//随机从列表抽取一个元素\\nfunction getOne(its) {return  its[Math.floor(Math.random()*its.length)];}\\n//去重（ES6 Set）\\nfunction unique2(array){\\n    return Array.from(new Set(array));\\n}\\n//获取列表中重复都值\\nfunction duplicates(arr) {\\n    let res=arr.filter((x,k)=>{\\n        let a=k*1+1;\\n        let index=arr.indexOf(x,a);\\n        if(index>-1){\\n            return x;\\n        }\\n    })\\n    let re=new Set(res);\\n    return Array.from(re);\\n}\\n$.exports.getOne = getOne;\\n$.exports.unique2 = unique2;\\n$.exports.duplicates = duplicates;\"},{\"name\":\"解析管理\",\"path\":\"jxManage\",\"rule\":\"js:\\nfunction jxManage(){\\n    const {color,small} = $.require(\\\"hiker://page/utiliy?rule=道长仓库Pro\\\");\\n    let d = [];\\n    let options = ['选择','修改','删除','导出'];\\n\\n    for(let i in options){\\n        let option = options[i];\\n        let flag = getVar('dn.jxm_option','选择')===option?'👉':'';\\n        d.push({\\n            title:flag+option,\\n            col_type:'scroll_button',\\n            url:$('#noLoading#').lazyRule((option)=>{\\n                putVar('dn.jxm_option', option);\\n                refreshPage(true);\\n                return 'hiker://empty';\\n            },option),\\n        });\\n    }\\n    let jxsRoute = \\\"hiker://files/cache/MyJiexi.json\\\";\\n    let MyJiexi = {jiexis:[]};\\n    let jiexis = {};\\n    try {\\n        MyJiexi = JSON.parse(fetch(jxsRoute));\\n        jiexis = MyJiexi.jiexis.filter(it=>it.name===MyJiexi.now)[0];\\n    }catch (e) {}\\n\\n    d.push({\\n        title:'导入',\\n        col_type:'scroll_button',\\n        url:$('','请输入导入口令').input((MyJiexi,jxsRoute)=>{\\n            if(/^魔断解析配置@.*?@http/.test(input)){\\n                let name = input.split('@')[1];\\n                let url = input.split('@')[2];\\n                return $('确定要导入断插解析配置-'+name+' 吗?').confirm((name,url,MyJiexi,jxsRoute)=>{\\n                    let content = parsePaste(url);\\n                    let hasIt = MyJiexi.jiexis.filter(it=>it.name===name);\\n                    if(hasIt&&hasIt.length>0){\\n                        let id = null;\\n                        for(let j in MyJiexi.jiexis){\\n                            if(MyJiexi.jiexis[j].name === name){\\n                                id = j;\\n                                break;\\n                            }\\n                        }\\n                        if(!id){\\n                            return 'toast://索引错误无法覆盖导入:\\\\n'+id\\n                        }\\n                        // log('覆盖导入主题id:'+id);\\n                        MyJiexi.jiexis[id] = Object.assign(JSON.parse(base64Decode(content)),{'name':name});\\n                    }else{\\n                        MyJiexi.jiexis.push(Object.assign(JSON.parse(base64Decode(content)),{'name':name}));\\n                    }\\n                    writeFile(jxsRoute,JSON.stringify(MyJiexi));\\n                    refreshPage(true);\\n                    return 'toast://已成功导入解析配置:\\\\n'+name\\n                },name,url,MyJiexi,jxsRoute);\\n            }else{\\n                return 'toast://无法识别的导入口令:\\\\n'+input;\\n            }\\n        },MyJiexi,jxsRoute),\\n    });\\n\\n    let isAuto = MyJiexi.isAuto;\\n    let autoMode = MyJiexi.autoMode;\\n    let tips = '解析配置列表:共计:'+color(MyJiexi.jiexis.length,'#ff7000')+'个配置,自动档开关:'+color(isAuto?'开':'关','#ff7000');\\n    d.push({\\n        title:MyJiexi.jiexis&&MyJiexi.jiexis.length>0?tips:\\\"第一次加载，点此进去初始化解析列表\\\",\\n        col_type:'text_1',\\n        url:$('#noLoading#').lazyRule((MyJiexi,jxsRoute)=>{\\n            if(MyJiexi.jiexis&&MyJiexi.jiexis.length>0){\\n                MyJiexi.isAuto = !MyJiexi.isAuto;\\n                writeFile(jxsRoute,JSON.stringify(MyJiexi));\\n                refreshPage(true);\\n                let tips = MyJiexi.isAuto?'开':'关';\\n                return 'toast://已设置自动档模式为:'+tips\\n            }else{\\n                let initSet = {'now':\\\"道长推荐\\\",'jiexis':[{name:'道长推荐',qy:['你爹科技'],yk:['领酷'],tx:['荣耀'],mg:['蚂蚁兄弟'],bl:['OK解析'],sh:['江湖D'],xg:['江湖D'],al:['江湖D'],pp:['人人迷'],mi:['1080'],le:['迪奥嗅探'],fun:['融兴'],one:['1080']}]};\\n                writeFile(jxsRoute,JSON.stringify(initSet));\\n                refreshPage(true);\\n                return 'toast://断插解析配置已初始化'\\n            }\\n        },MyJiexi,jxsRoute)\\n    });\\n    let autoModeTips = autoMode==='速度优先'?'速度优先':'顺序优先';\\n    d.push({\\n        title:small(\\\"备胎宠幸方案:\\\")+color(autoModeTips,'#ff7000'),\\n        col_type:'text_2',\\n        url:$('#noLoading#').lazyRule((MyJiexi,jxsRoute)=>{\\n            MyJiexi.autoMode = MyJiexi.autoMode==='速度优先'?'顺序优先':'速度优先';\\n            writeFile(jxsRoute,JSON.stringify(MyJiexi));\\n            refreshPage(true);\\n            return 'toast://已设置备胎宠幸方案为:'+MyJiexi.autoMode\\n        },MyJiexi,jxsRoute)\\n    });\\n\\n    d.push({\\n        title:color(\\\"恢复出厂设置\\\",'#ff7000'),\\n        col_type:'text_2',\\n        url:$(\\\"如果你的解析管理无法正常用了，此方法可以救砖，确认恢复?\\\").confirm((jxsRoute)=>{\\n            let initSet = {'now':\\\"道长推荐\\\",'jiexis':[{name:'道长推荐',qy:['你爹科技'],yk:['领酷'],tx:['荣耀'],mg:['蚂蚁兄弟'],bl:['OK解析'],sh:['江湖D'],xg:['江湖D'],al:['江湖D'],pp:['人人迷'],mi:['1080'],le:['迪奥嗅探'],fun:['融兴'],one:['1080'],}]};\\n            writeFile(jxsRoute,JSON.stringify(initSet));\\n            refreshPage(true);\\n            return 'toast://断插解析配置已重置为出厂设置'\\n        },jxsRoute)\\n    });\\n\\n    for(let i in MyJiexi.jiexis){\\n        let nowJx = MyJiexi.jiexis[i];\\n        d.push({\\n            title:MyJiexi.now===nowJx.name?'👉'+nowJx.name:nowJx.name,\\n            col_type:'flex_button',\\n            extra:{\\n                nowJx:nowJx,\\n                MyJiexi:MyJiexi,\\n                jxsRoute:jxsRoute\\n            },\\n            url:$('#noLoading#').lazyRule((nowJx,MyJiexi,i,jxsRoute)=>{\\n                let option = getVar('dn.jxm_option','选择');\\n                switch (option){\\n                    case '导出':\\n                        let nowJxCode = base64Encode(JSON.stringify(nowJx));\\n                        let url = sharePaste(nowJxCode);\\n                        let code = '魔断解析配置@'+nowJx.name+'@'+url;\\n                        copy(code);\\n                        return 'toast://已导出为云口令并复制到剪切板'\\n                    case '修改':\\n                        // if(nowJx.name===MyJiexi.now){\\n                        //     return 'toast://此解析配置当前正在使用中，不允许修改!'\\n                        // }\\n                        // else{\\n                        //     return 'hiker://page/jxEdit?rule=MyFieldᴰⁿ'\\n                        // }\\n                        return 'hiker://page/jxEdit?rule=MyFieldᴰⁿ'\\n                    case '删除':\\n                        return $('确认删除解析配置:'+nowJx.name+'?').confirm((nowJx,MyJiexi,i,jxsRoute)=>{\\n                            if(nowJx.name===MyJiexi.now){\\n                                return 'toast://此解析配置当前正在使用中，不允许删除!'\\n                            }\\n                            MyJiexi.jiexis.splice(i,1);\\n                            writeFile(jxsRoute,JSON.stringify(MyJiexi));\\n                            refreshPage(true);\\n                            return 'toast://已删除'\\n                        },nowJx,MyJiexi,i,jxsRoute)\\n                    default:\\n                        MyJiexi.now=nowJx.name;\\n                        writeFile(jxsRoute,JSON.stringify(MyJiexi));\\n                        refreshPage(true);\\n                        return 'toast://你选择了'+nowJx.name+'作为当前解析配置';\\n                }\\n            },nowJx,MyJiexi,i,jxsRoute),\\n        });\\n    }\\n    setResult(d);\\n}\\n$.exports.jxManage=jxManage;\"},{\"name\":\"解析编辑\",\"path\":\"jxEdit\",\"rule\":\"js:\\nlet {nowJx,MyJiexi,jxsRoute} = MY_PARAMS;\\nlet nowJxT = JSON.parse(getVar('dn.nowJx')||'{}');\\nnowJx = nowJxT.name?nowJxT:nowJx;\\naddListener('onClose', $.toString(()=>{\\n    clearVar(\\\"dn.jx_titles\\\");\\n    clearVar(\\\"dn.nowJx\\\");\\n    clearVar(\\\"dn.jxm_name\\\");\\n}));\\nlet id = null;\\nfor(let j in MyJiexi.jiexis){\\n    if(MyJiexi.jiexis[j].name === nowJx.name){\\n        id = j;\\n        break;\\n    }\\n}\\nlet d = [];\\nd.push({\\n    title: '配置名称',\\n    desc: \\\"解析配置名称,如道长推荐\\\",\\n    extra: {\\n        onChange: \\\"putVar('dn.jxm_name',input)\\\",\\n        titleVisible: true,\\n        defaultValue:getVar('dn.jxm_name','')||nowJx.name\\n    },\\n    col_type:'input'\\n});\\n// let options = ['选择','新增','删除','批量删除','移动'];\\nlet options = ['新增','删除','移动'];\\n\\nfor(let i in options){\\n    let option = options[i];\\n    let flag = getVar('dn.jxm_writeMode','新增')===option?'👉':'';\\n    d.push({\\n        title:flag+option,\\n        // col_type:'scroll_button',\\n        col_type:'flex_button',\\n        url:$('#noLoading#').lazyRule((option)=>{\\n            putVar('dn.jxm_writeMode', option);\\n            refreshPage(true);\\n            return 'hiker://empty';\\n        },option),\\n    });\\n}\\nd.push({\\n    col_type:'line'\\n});\\n//获取断插列表\\nif(!getVar(\\\"dn.jx_titles\\\")){\\n    let titleArr = [], urlArr = [];\\n    var json={title:[],codes:{}};\\n    let setFile = request('hiker://files/rules/DuanNian/MyParse.json');\\n    try {\\n        eval('json='+setFile);\\n    }catch (e) {\\n        log('Json解析发生了错误:'+e.message);\\n    }\\n    titleArr = json.title;\\n    titleArr.forEach((it) => {\\n        urlArr.push(json.codes[it]);\\n    });\\n    putVar('dn.jx_titles',JSON.stringify(titleArr));\\n}\\n\\nlet titles = JSON.parse(getVar('dn.jx_titles')||'[]');\\nlet titleDic = {\\n    al:'阿里',bl:'哔哩哔哩',fun:'风行',le:'乐视',mg:'芒果',mi:'咪咕',pp:'PPTV',qy:'爱奇艺',sh:'搜狐',\\n    tx:'腾讯',xg:'西瓜',yk:'优酷',one:'1905'\\n}\\n\\n//-----------------\\nlet jds = Object.keys(nowJx).filter(it=>it!=='name'&&it!=='oth');\\nfor(let j in jds){\\n    let jxs = nowJx[jds[j]]||[];\\n    let title = jds[j];\\n    d.push({\\n        title:titleDic[title]||title,\\n        col_type:'scroll_button',\\n        url:$('#noLoading#').lazyRule((titles,title,jxs,jxsRoute,MyJiexi,nowJx)=>{\\n            if(getVar('dn.jxm_writeMode','新增')==='新增'){\\n                let sel_title = titles.filter(it=>!jxs.includes(it));\\n                return $(sel_title,3).select((MyJiexi,jxs,nowJx,title,jxsRoute)=>{\\n                    let id = null;\\n                    for(let j in MyJiexi.jiexis){\\n                        if(MyJiexi.jiexis[j].name === nowJx.name){\\n                            id = j;\\n                            break;\\n                        }\\n                    }\\n                    if(!id){\\n                        return 'toast://索引错误无法保存:\\\\n'+id\\n                    }\\n                    jxs.push(input);\\n                    log(jxs);\\n                    nowJx[title] = jxs;\\n                    MyJiexi.jiexis[id] = nowJx;\\n                    putVar('dn.nowJx',JSON.stringify(nowJx));\\n                    writeFile(jxsRoute,JSON.stringify(MyJiexi));\\n                    refreshPage(true);\\n                    return 'hiker://empty'\\n                },MyJiexi,jxs,nowJx,title,jxsRoute);\\n            }else {\\n                return 'hiker://empty'\\n            }\\n        },titles,title,jxs,jxsRoute,MyJiexi,nowJx)\\n    });\\n    for(let k in jxs){\\n        d.push({\\n            title:jxs[k],\\n            col_type:'scroll_button',\\n            url:$('#noLoading#').lazyRule((titles,title,jxs,jxsRoute,MyJiexi,nowJx,njx,id,k,max)=>{\\n                switch (getVar('dn.jxm_writeMode','新增')){\\n                    case '删除':\\n                        Array.prototype.remove = function(val) {\\n                            let index = this.indexOf(val);\\n                            if (index > -1) {\\n                                this.splice(index, 1);\\n                            }\\n                        };\\n                        jxs.remove(njx);\\n                        nowJx[title] = jxs;\\n                        MyJiexi.jiexis[id] = nowJx;\\n                        putVar('dn.nowJx',JSON.stringify(nowJx));\\n                        writeFile(jxsRoute,JSON.stringify(MyJiexi));\\n                        refreshPage(true);\\n                        return 'hiker://empty'\\n                    case '移动':\\n                        return $(k,'移动到索引多少?').input((k,max,jxs,nowJx,MyJiexi,id,title,jxsRoute)=>{\\n                            function Move(arr, fromIndex, toIndex) {\\n                                var element = arr[fromIndex];\\n                                arr.splice(fromIndex, 1);\\n                                arr.splice(toIndex, 0, element);\\n                            }\\n                            if(parseInt(input)===k){\\n                                return 'toast://啥也没做'\\n                            }else if(parseInt(input)>max-1||parseInt(input)<-1){\\n                                return 'toast://你最大移动范围0-'+parseInt(max-1);\\n                            }\\n                            // let newAr = jxs.splice(k, 1); // 删掉\\n                            // jxs.unshift(newAr[0]);\\n                            Move(jxs,k,parseInt(input));\\n                            nowJx[title] = jxs;\\n                            MyJiexi.jiexis[id] = nowJx;\\n                            putVar('dn.nowJx',JSON.stringify(nowJx));\\n                            writeFile(jxsRoute,JSON.stringify(MyJiexi));\\n                            refreshPage(true);\\n                            return 'hiker://empty'\\n                        },k,max,jxs,nowJx,MyJiexi,id,title,jxsRoute)\\n                    default:\\n                        return 'toast://此元素不支持进行:'+getVar('dn.jxm_writeMode','新增')\\n                }\\n            },titles,title,jxs,jxsRoute,MyJiexi,nowJx,jxs[k],id,k,jxs.length)\\n        });\\n    }\\n    d.push({\\n        col_type:'line'\\n    })\\n}\\n\\nd.push({\\n   title:'保存',\\n   col_type:'text_center_1',\\n   url:$('#noLoading#').lazyRule((MyJiexi,id,jxsRoute)=>{\\n       if(getVar('dn.jxm_name','')!==MyJiexi.jiexis[id].name){\\n           ifHas = MyJiexi.jiexis.filter(it=>it.name===getVar('dn.jxm_name','')).length>0;\\n           if(ifHas){\\n               return 'toast://待修改的名称重复,不允许保存'\\n           }else{\\n               MyJiexi.jiexis[id].name =  getVar('dn.jxm_name','');\\n               writeFile(jxsRoute,JSON.stringify(MyJiexi));\\n           }\\n       }\\n       back(true);\\n       return 'toast://已保存'\\n   },MyJiexi,id,jxsRoute)\\n});\\nsetResult(d);\"},{\"name\":\"小白模式\",\"path\":\"smallWhite\",\"rule\":\"js:\\nsetPageTitle('道长给小白的关爱');\\nconst {color, small,api} = $.require(\\\"hiker://page/utiliy?rule=道长仓库Pro\\\");\\nlet fileRoot = api.host+'/hikerule/zyw_data/';\\n// log(fileRoot);\\nlet d = [];\\nvar themeRoute = \\\"hiker://files/cache/MyTheme.json\\\";\\nvar themeOnline = fileRoot+'11';\\nvar oldRoute = \\\"hiker://files/cache/MyParseSet.json\\\";\\nvar oldOnline = fileRoot+'12';\\nvar newRoute = \\\"hiker://files/rules/DuanNian/MyParse.json\\\";\\nvar newOnline = fileRoot+'13';\\nvar jxsRoute = \\\"hiker://files/cache/MyJiexi.json\\\";\\nvar jxOnline = fileRoot+'14';\\nvar cjcache = 'hiker://files/cache/Parse_Dn.js';\\nvar x5cache = 'hiker://files/cache/Parse_Dn.html';\\nd.push({\\n    title:small('你好,小白,即使啥也不会,也可以看明白下面的字吧?'),\\n    desc:'如果还是不会,请删以永治,告辞不谢',\\n    col_type:'text_1',\\n    url:$('#noLoading#').lazyRule(()=>{\\n        return 'toast://据说你不服气,不承认自己是小白?\\\\n点我只是为了宣泄一下你的愤怒?啥也别说了,下去搞!'\\n    })\\n});\\nd.push({\\n   title:small('单项解析选择界面主题是什么?')+color('不知道,来一份道长的','#5FB878'),\\n    desc:'自动拉取道长的主题配置以及网页插件和静态页面',\\n   col_type:'text_1',\\n   url:$('确认吗?如果你不是小白，总该会提前备份自己主题的吧!\\\\n'+themeRoute).confirm((cjcache,x5cache,themeRoute,themeOnline)=>{\\n       let themeCode = fetch(themeOnline);\\n       if(!/now_theme/.test(themeCode)){\\n           log(themeCode);\\n           return 'toast://失败!与道长服务器通讯错误,估计是网络卡了'\\n       }\\n       let cjFrom = \\\"hiker://page/Parse_Dn.js?rule=MyFieldᴰⁿ\\\";\\n       let x5From = \\\"hiker://page/Parse_Dn.html?rule=MyFieldᴰⁿ\\\";\\n       try {\\n           let cjFile = JSON.parse(fetch(cjFrom)).rule;\\n           let x5File = JSON.parse(fetch(x5From)).rule;\\n           writeFile(cjcache, cjFile);\\n           writeFile(x5cache, x5File);\\n           writeFile(themeRoute, themeCode);\\n           clearVar(\\\"jxOldV\\\");\\n           clearVar(\\\"jxNewV\\\");\\n           refreshPage(false);\\n           return 'toast://主题已成功应用'\\n       }\\n       catch(e){\\n           return 'toast://主题应用失败\\\\n未期望的错误:'+e.message;\\n       }\\n   },cjcache,x5cache,themeRoute,themeOnline)\\n});\\nd.push({\\n    title:small('断插解析及默认列表是什么?')+color('不知道,来一份道长的','#5FB878'),\\n    desc:'自动拉取道长在用的两个MyParse.json文件',\\n    col_type:'text_1',\\n    url:$('确认吗?如果你不是小白，总该会提前备份自己的配置文件吧!\\\\n'+oldRoute+'\\\\n'+newRoute).confirm((oldRoute,oldOnline,newRoute,newOnline)=>{\\n        let oldCode = fetch(oldOnline);\\n        let newCode = fetch(newOnline);\\n        if(!/Parse_Dn\\\\.js/.test(oldCode)||!/Parse_Dn\\\\.js/.test(newCode)){\\n            return 'toast://失败!与道长服务器通讯错误,估计是网络卡了'\\n        }\\n        try {\\n            writeFile(oldRoute, oldCode);\\n            writeFile(newRoute, newCode);\\n            return 'toast://断插解析配置及默认列表已经配置成功'\\n        }\\n        catch(e){\\n            return 'toast://配置应用失败\\\\n未期望的错误:'+e.message;\\n        }\\n    },oldRoute,oldOnline,newRoute,newOnline)\\n});\\nd.push({\\n    title:small('断插解析自动档模式是什么?')+color('不知道,来一份道长的','#5FB878'),\\n    desc:'自动拉取道长在用的MyJiexi.json文件',\\n    col_type:'text_1',\\n    url:$('确认吗?如果你不是小白，总该会提前备份自己的自动档方案吧!\\\\n'+jxsRoute).confirm((jxsRoute,jxOnline)=>{\\n        let jxCode = fetch(jxOnline);\\n        if(!/jiexis/.test(jxCode)){\\n            return 'toast://失败!与道长服务器通讯错误,估计是网络卡了'\\n        }\\n        try {\\n            writeFile(jxsRoute, jxCode);\\n            return 'toast://断插解析配置及默认列表已经配置成功'\\n        }\\n        catch(e){\\n            return 'toast://自动档应用失败\\\\n未期望的错误:'+e.message;\\n        }\\n    },jxsRoute,jxOnline)\\n});\\nd.push({\\n    title:small('真的啥也不会了,还懒得一个个点?')+color('不知道,来一份道长的','#5FB878'),\\n    desc:'自动拉取道长在用的上述所有文件\\\\n一键搞完直接去支持断插的小程序看视频就行啦',\\n    col_type:'text_1',\\n    url:$('修仙法力无边','确认吗?如果你不是小白，总该会提前备份自己的上述所有文件吧!\\\\n请输入道长修仙法力无边来确认执行此操作').input((cjcache,x5cache,themeRoute,oldRoute,newRoute,jxsRoute,themeOnline,oldOnline,newOnline,jxOnline)=>{\\n        if(input!=='道长修仙法力无边'){\\n            return 'toast://本次取消执行'\\n        }\\n        let themeCode = fetch(themeOnline);\\n        if(!/now_theme/.test(themeCode)){\\n            log('themeCode:'+themeCode);\\n            return 'toast://拉主题失败!与道长服务器通讯错误,估计是网络卡了'\\n        }\\n        let cjFrom = \\\"hiker://page/Parse_Dn.js?rule=MyFieldᴰⁿ\\\";\\n        let x5From = \\\"hiker://page/Parse_Dn.html?rule=MyFieldᴰⁿ\\\";\\n        let cjFile = JSON.parse(fetch(cjFrom)).rule;\\n        let x5File = JSON.parse(fetch(x5From)).rule;\\n        let oldCode = fetch(oldOnline);\\n        let newCode = fetch(newOnline);\\n        if(!/Parse_Dn\\\\.js/.test(oldCode)||!/Parse_Dn\\\\.js/.test(newCode)){\\n            // log('oldCode:'+oldCode);\\n            // log('newCode:'+newCode);\\n            return 'toast://失败!与道长服务器通讯错误,估计是网络卡了'\\n        }\\n        let jxCode = fetch(jxOnline);\\n        if(!/jiexis/.test(jxCode)){\\n            // log('jxCode:'+jxCode);\\n            return 'toast://失败!与道长服务器通讯错误,估计是网络卡了'\\n        }\\n        try {\\n            writeFile(cjcache, cjFile); // 拉插件\\n            writeFile(x5cache, x5File); //拉网页文件\\n            writeFile(themeRoute, themeCode); //拉主题文件\\n            clearVar(\\\"jxOldV\\\");\\n            clearVar(\\\"jxNewV\\\");\\n            writeFile(oldRoute, oldCode); //拉断插默认选择界面的配置\\n            writeFile(newRoute, newCode); //拉断插内的解析\\n            writeFile(jxsRoute, jxCode); // 拉自动档文件\\n            back(true);\\n            return 'toast://断插解析配置及默认列表已经配置成功'\\n        }\\n        catch(e){\\n            return 'toast://一键模式应用失败\\\\n未期望的错误:'+e.message;\\n        }\\n    },cjcache,x5cache,themeRoute,oldRoute,newRoute,jxsRoute,themeOnline,oldOnline,newOnline,jxOnline)\\n});\\nlet descInfo = '主题文件:'+themeRoute+'\\\\n主界面配置:'+oldRoute+'\\\\n嫖到的解析:'+newRoute+'\\\\n自动档解析:'+jxsRoute;\\ndescInfo+='\\\\n主插件:'+cjcache+'\\\\n主配置选择界面文件:'+x5cache;\\nd.push({\\n    title:'文件描述:\\\\n'+descInfo,\\n    col_type:'long_text',\\n    extra:{textSize: 13,lineVisible:false}\\n});\\nsetResult(d);\"}]","icon":"https://lanmeiguojiang.com/tubiao/movie/4.svg"}
